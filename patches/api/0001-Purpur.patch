From bf8df5e3449e5175f01e602a6fbae9ce22d8c0b8 Mon Sep 17 00:00:00 2001
From: guacaplushy <guacaplushy@icloud.com>
Date: Fri, 13 Aug 2021 16:12:49 -0400
Subject: [PATCH] Purpur

---
 build.gradle.kts                              |   1 +
 .../com/destroystokyo/paper/ClientOption.java |  10 +
 .../destroystokyo/paper/MaterialSetTag.java   |   6 +
 .../com/destroystokyo/paper/SkinParts.java    |   3 +
 .../paper/block/TargetBlockInfo.java          |   3 +
 .../paper/entity/RangedEntity.java            |   3 +
 .../paper/entity/ai/VanillaGoal.java          |  11 +
 .../paper/event/block/TNTPrimeEvent.java      |   3 +
 .../event/entity/EndermanEscapeEvent.java     |   6 +
 .../event/entity/EntityTransformedEvent.java  |   3 +
 .../event/entity/WitchReadyPotionEvent.java   |   3 +
 .../executor/MethodHandleEventExecutor.java   |   3 +
 .../StaticMethodHandleEventExecutor.java      |   3 +
 .../asm/ASMEventExecutorGenerator.java        |   3 +
 .../event/executor/asm/ClassDefiner.java      |   3 +
 .../event/executor/asm/SafeClassDefiner.java  |   3 +
 .../event/player/PlayerArmorChangeEvent.java  |   3 +
 .../player/PlayerConnectionCloseEvent.java    |  12 +-
 .../player/PlayerUseUnknownEntityEvent.java   |   3 +
 .../paper/event/server/GS4QueryEvent.java     |   3 +
 .../event/server/ServerTickStartEvent.java    |   3 +
 .../paper/inventory/meta/ArmorStandMeta.java  |   3 +
 .../LootableInventoryReplenishEvent.java      |   3 +
 .../destroystokyo/paper/util/SneakyThrow.java |   3 +
 .../paper/util/VersionFetcher.java            |   6 +
 .../CachedSizeConcurrentLinkedQueue.java      |   5 +
 .../papermc/paper/inventory/ItemRarity.java   |   2 +-
 .../io/papermc/paper/world/MoonPhase.java     |   3 +
 .../purpur/event/ExecuteCommandEvent.java     | 130 ++++
 .../net/pl3x/purpur/event/PlayerAFKEvent.java |  70 ++
 .../PlayerSetSpawnerTypeWithEggEvent.java     |  85 +++
 .../entity/EntityTeleportHinderedEvent.java   | 117 ++++
 .../event/entity/LlamaJoinCaravanEvent.java   |  61 ++
 .../event/entity/LlamaLeaveCaravanEvent.java  |  34 +
 .../event/entity/MonsterEggSpawnEvent.java    |  67 ++
 .../purpur/event/entity/RidableMoveEvent.java | 103 +++
 .../event/entity/RidableSpacebarEvent.java    |  37 +
 .../event/inventory/AnvilTakeResultEvent.java |  52 ++
 .../inventory/AnvilUpdateResultEvent.java     |  35 +
 .../event/player/PlayerBookTooLargeEvent.java |  65 ++
 .../event/world/StructureGenerateEvent.java   |  68 ++
 src/main/java/org/bukkit/Bukkit.java          |  34 +-
 src/main/java/org/bukkit/ChatColor.java       |  26 +
 src/main/java/org/bukkit/Fluid.java           |   3 +
 src/main/java/org/bukkit/Material.java        |  36 +
 src/main/java/org/bukkit/Nameable.java        |   3 +
 src/main/java/org/bukkit/OfflinePlayer.java   |   3 +
 src/main/java/org/bukkit/Server.java          |  53 +-
 src/main/java/org/bukkit/UnsafeValues.java    |  34 +
 src/main/java/org/bukkit/World.java           |  20 +
 src/main/java/org/bukkit/WorldBorder.java     |   3 +
 src/main/java/org/bukkit/WorldCreator.java    |   4 +
 .../org/bukkit/advancement/Advancement.java   |   9 +
 .../advancement/AdvancementDisplay.java       |  56 ++
 .../org/bukkit/advancement/FrameType.java     |  30 +
 src/main/java/org/bukkit/block/Block.java     |   3 +
 src/main/java/org/bukkit/block/Lidded.java    |   3 +
 src/main/java/org/bukkit/block/Sign.java      |   6 +-
 src/main/java/org/bukkit/boss/BarColor.java   |   3 +
 src/main/java/org/bukkit/boss/BarFlag.java    |   3 +
 src/main/java/org/bukkit/boss/BarStyle.java   |   3 +
 src/main/java/org/bukkit/boss/BossBar.java    |   3 +
 .../org/bukkit/command/CommandSender.java     |   3 +
 .../org/bukkit/command/SimpleCommandMap.java  |  15 +-
 .../command/defaults/PluginsCommand.java      |  86 ++-
 .../command/defaults/VersionCommand.java      |  29 +-
 .../bukkit/conversations/Conversation.java    |   3 +
 .../enchantments/EnchantmentTarget.java       |  12 +
 .../java/org/bukkit/entity/AbstractArrow.java |   3 +
 .../java/org/bukkit/entity/AnimalTamer.java   |   3 +
 .../java/org/bukkit/entity/ArmorStand.java    |   3 +
 src/main/java/org/bukkit/entity/Arrow.java    |   3 +
 src/main/java/org/bukkit/entity/Dolphin.java  |   3 +
 .../org/bukkit/entity/DragonFireball.java     |   3 +
 .../java/org/bukkit/entity/Endermite.java     |  15 +-
 src/main/java/org/bukkit/entity/Entity.java   |  74 ++
 .../java/org/bukkit/entity/EntityType.java    |   3 +
 src/main/java/org/bukkit/entity/Firework.java |   3 +
 src/main/java/org/bukkit/entity/Guardian.java |   3 +
 .../java/org/bukkit/entity/IronGolem.java     |  16 +
 src/main/java/org/bukkit/entity/Item.java     |  58 ++
 .../org/bukkit/entity/LightningStrike.java    |   3 +
 .../java/org/bukkit/entity/LivingEntity.java  |  37 +
 src/main/java/org/bukkit/entity/Llama.java    |  62 ++
 src/main/java/org/bukkit/entity/Mob.java      |  16 +
 src/main/java/org/bukkit/entity/Panda.java    |   3 +
 src/main/java/org/bukkit/entity/Player.java   | 135 +++-
 src/main/java/org/bukkit/entity/Rabbit.java   |   3 +
 src/main/java/org/bukkit/entity/Raider.java   |   3 +
 src/main/java/org/bukkit/entity/Shulker.java  |   3 +
 .../java/org/bukkit/entity/ShulkerBullet.java |   3 +
 src/main/java/org/bukkit/entity/Snowman.java  |  16 +
 src/main/java/org/bukkit/entity/Tameable.java |   3 +
 .../bukkit/entity/ThrowableProjectile.java    |   3 +
 src/main/java/org/bukkit/entity/Villager.java |   7 +
 src/main/java/org/bukkit/entity/Wither.java   |  16 +
 src/main/java/org/bukkit/entity/Wolf.java     |  16 +
 .../entity/minecart/CommandMinecart.java      |   5 +-
 .../java/org/bukkit/event/Cancellable.java    |   3 +
 src/main/java/org/bukkit/event/Event.java     |   3 +
 .../java/org/bukkit/event/EventException.java |   3 +
 .../java/org/bukkit/event/block/Action.java   |   3 +
 .../event/block/CauldronLevelChangeEvent.java |   6 +
 .../bukkit/event/block/SignChangeEvent.java   |   6 +-
 .../entity/EntityDamageByEntityEvent.java     |  25 +
 .../event/entity/EntityPotionEffectEvent.java |   6 +
 .../event/entity/EntityTransformEvent.java    |   3 +
 .../event/entity/EntityUnleashEvent.java      |   3 +
 .../bukkit/event/entity/ItemMergeEvent.java   |   3 +
 .../bukkit/event/entity/PlayerDeathEvent.java |   4 +-
 .../entity/VillagerCareerChangeEvent.java     |   3 +
 .../event/inventory/InventoryCloseEvent.java  |   3 +
 .../bukkit/event/inventory/InventoryType.java |  13 +-
 .../inventory/PrepareItemCraftEvent.java      |   3 +
 .../player/AsyncPlayerPreLoginEvent.java      |   6 +-
 .../bukkit/event/player/PlayerJoinEvent.java  |   6 +-
 .../bukkit/event/player/PlayerKickEvent.java  |   8 +-
 .../event/player/PlayerLocaleChangeEvent.java |   2 +-
 .../bukkit/event/player/PlayerLoginEvent.java |   6 +-
 .../event/player/PlayerPreLoginEvent.java     |   6 +-
 .../bukkit/event/player/PlayerQuitEvent.java  |   7 +-
 .../event/player/PlayerTeleportEvent.java     |   3 +
 .../org/bukkit/event/raid/RaidStopEvent.java  |   3 +
 .../event/server/BroadcastMessageEvent.java   |   4 +-
 .../event/server/ServerListPingEvent.java     |   4 +-
 .../event/weather/LightningStrikeEvent.java   |   3 +
 .../org/bukkit/event/world/WorldEvent.java    |   7 +
 .../org/bukkit/help/HelpTopicComparator.java  |   3 +
 .../org/bukkit/inventory/AnvilInventory.java  |  10 +
 .../inventory/ArmoredHorseInventory.java      |   3 +
 .../org/bukkit/inventory/EquipmentSlot.java   |   3 +
 .../org/bukkit/inventory/InventoryHolder.java |   3 +
 .../org/bukkit/inventory/InventoryView.java   |   2 +-
 .../org/bukkit/inventory/ItemFactory.java     |  14 +-
 .../java/org/bukkit/inventory/ItemStack.java  | 634 ++++++++++++++++++
 .../org/bukkit/inventory/RecipeChoice.java    |  14 +
 .../inventory/SaddledHorseInventory.java      |   3 +
 .../org/bukkit/inventory/meta/BannerMeta.java |   3 +
 .../bukkit/inventory/meta/BlockDataMeta.java  |   3 +
 .../bukkit/inventory/meta/BlockStateMeta.java |   3 +
 .../org/bukkit/inventory/meta/BookMeta.java   |  15 +-
 .../bukkit/inventory/meta/CrossbowMeta.java   |   3 +
 .../org/bukkit/inventory/meta/ItemMeta.java   |   8 +-
 .../inventory/meta/KnowledgeBookMeta.java     |   3 +
 src/main/java/org/bukkit/map/MapCursor.java   |   4 +-
 .../java/org/bukkit/material/CocoaPlant.java  |   3 +
 .../java/org/bukkit/material/Directional.java |   3 +
 .../java/org/bukkit/material/Openable.java    |   3 +
 .../org/bukkit/material/PressureSensor.java   |   3 +
 .../org/bukkit/metadata/MetadataStore.java    |   5 +
 .../bukkit/metadata/MetadataStoreBase.java    |   5 +
 .../org/bukkit/metadata/MetadataValue.java    |   3 +
 .../bukkit/permissions/PermissibleBase.java   |   4 +-
 .../org/bukkit/plugin/AuthorNagException.java |   3 +
 .../projectiles/BlockProjectileSource.java    |   3 +
 .../java/org/bukkit/scoreboard/Objective.java |   4 +-
 .../org/bukkit/scoreboard/Scoreboard.java     |   4 +-
 src/main/java/org/bukkit/scoreboard/Team.java |  16 +-
 .../util/permissions/CommandPermissions.java  |   1 +
 .../util/permissions/DefaultPermissions.java  |  12 +-
 .../util/permissions/PurpurPermissions.java   |  79 +++
 161 files changed, 2972 insertions(+), 115 deletions(-)
 create mode 100644 src/main/java/net/pl3x/purpur/event/ExecuteCommandEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/PlayerAFKEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/PlayerSetSpawnerTypeWithEggEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/EntityTeleportHinderedEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/LlamaJoinCaravanEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/LlamaLeaveCaravanEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/MonsterEggSpawnEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/RidableMoveEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/entity/RidableSpacebarEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/inventory/AnvilTakeResultEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/inventory/AnvilUpdateResultEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/player/PlayerBookTooLargeEvent.java
 create mode 100644 src/main/java/net/pl3x/purpur/event/world/StructureGenerateEvent.java
 create mode 100644 src/main/java/org/bukkit/advancement/AdvancementDisplay.java
 create mode 100644 src/main/java/org/bukkit/advancement/FrameType.java
 create mode 100644 src/main/java/org/bukkit/util/permissions/PurpurPermissions.java

diff --git a/build.gradle.kts b/build.gradle.kts
index d69d367a..206ac6d9 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -28,6 +28,7 @@ dependencies {
     api("net.kyori:adventure-text-serializer-plain")
     api("org.apache.logging.log4j:log4j-api:2.14.1") // Paper
     api("org.slf4j:slf4j-api:1.7.30") // Paper
+    api("net.kyori:adventure-text-minimessage:4.1.0-SNAPSHOT") // Purpur
 
     implementation("org.ow2.asm:asm:9.1")
     implementation("org.ow2.asm:asm-commons:9.1")
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index 9dad814c..7baf7ee3 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -4,6 +4,11 @@ import org.jetbrains.annotations.NotNull;
 
 import org.bukkit.inventory.MainHand;
 
+/**
+ * Represents a client option
+ *
+ * @param <T> Client option type
+ */
 public final class ClientOption<T> {
 
     public static final ClientOption<SkinParts> SKIN_PARTS = new ClientOption<>(SkinParts.class);
@@ -19,6 +24,11 @@ public final class ClientOption<T> {
         this.type = type;
     }
 
+    /**
+     * Get the option's type
+     *
+     * @return Option's type
+     */
     @NotNull
     public Class<T> getType() {
         return type;
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index a02a02aa..6c99f4b4 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -21,10 +21,14 @@ import java.util.stream.Stream;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Material set tag
+ */
 public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
 
     /**
      * @deprecated Use NamespacedKey version of constructor
+     * @param filter Filter predicate
      */
     @Deprecated
     public MaterialSetTag(@NotNull Predicate<Material> filter) {
@@ -33,6 +37,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
 
     /**
      * @deprecated Use NamespacedKey version of constructor
+     * @param materials Materials to include
      */
     @Deprecated
     public MaterialSetTag(@NotNull Collection<Material> materials) {
@@ -41,6 +46,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
 
     /**
      * @deprecated Use NamespacedKey version of constructor
+     * @param materials Materials to include
      */
     @Deprecated
     public MaterialSetTag(@NotNull Material... materials) {
diff --git a/src/main/java/com/destroystokyo/paper/SkinParts.java b/src/main/java/com/destroystokyo/paper/SkinParts.java
index 4a0c3940..9b269a51 100644
--- a/src/main/java/com/destroystokyo/paper/SkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/SkinParts.java
@@ -1,5 +1,8 @@
 package com.destroystokyo.paper;
 
+/**
+ * Skin parts
+ */
 public interface SkinParts {
 
     boolean hasCapeEnabled();
diff --git a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
index 18a96dbb..1bae8e5d 100644
--- a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
+++ b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
@@ -46,6 +46,9 @@ public class TargetBlockInfo {
         return block.getRelative(blockFace);
     }
 
+    /**
+     * Fluid mode
+     */
     public enum FluidMode {
         NEVER,
         SOURCE_ONLY,
diff --git a/src/main/java/com/destroystokyo/paper/entity/RangedEntity.java b/src/main/java/com/destroystokyo/paper/entity/RangedEntity.java
index f2e3233a..e66e8b28 100644
--- a/src/main/java/com/destroystokyo/paper/entity/RangedEntity.java
+++ b/src/main/java/com/destroystokyo/paper/entity/RangedEntity.java
@@ -4,6 +4,9 @@ import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents an entity with ranged attacks
+ */
 public interface RangedEntity extends Mob {
     /**
      * Attack the specified entity using a ranged attack.
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
index fb0c77c6..c7786c4c 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
@@ -196,6 +196,17 @@ public interface VanillaGoal<T extends Mob> extends Goal<T> {
     GoalKey<Raider> RAIDER_CELEBRATION = GoalKey.of(Raider.class, NamespacedKey.minecraft("raider_celebration"));
     GoalKey<Raider> RAIDER_MOVE_THROUGH_VILLAGE = GoalKey.of(Raider.class, NamespacedKey.minecraft("raider_move_through_village"));
 
+    // Purpur start
+    GoalKey<Mob> MOB_HAS_RIDER = GoalKey.of(Mob.class, NamespacedKey.minecraft("has_rider"));
+    GoalKey<AbstractHorse> HORSE_HAS_RIDER = GoalKey.of(AbstractHorse.class, NamespacedKey.minecraft("horse_has_rider"));
+    GoalKey<Phantom> FIND_CRYSTAL = GoalKey.of(Phantom.class, NamespacedKey.minecraft("find_crystal"));
+    GoalKey<Phantom> ORBIT_CRYSTAL = GoalKey.of(Phantom.class, NamespacedKey.minecraft("orbit_crystal"));
+    GoalKey<Drowned> DROWNED_ATTACK_VILLAGER = GoalKey.of(Drowned.class, NamespacedKey.minecraft("drowned_attack_villager"));
+    GoalKey<Zombie> ZOMBIE_ATTACK_VILLAGER = GoalKey.of(Zombie.class, NamespacedKey.minecraft("zombie_attack_villager"));
+    GoalKey<Wolf> AVOID_RABID_WOLF = GoalKey.of(Wolf.class, NamespacedKey.minecraft("avoid_rabid_wolf"));
+    GoalKey<IronGolem> RECEIVE_FLOWER = GoalKey.of(IronGolem.class, NamespacedKey.minecraft("receive_flower"));
+    // Purpur end
+
     /**
      * @deprecated removed in 1.16
      */
diff --git a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
index 73dabb82..b065f8f8 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
@@ -83,6 +83,9 @@ public class TNTPrimeEvent extends BlockEvent implements Cancellable {
         return handlers;
     }
 
+    /**
+     * TnT prime reason
+     */
     public enum PrimeReason {
         /**
          * When TNT prime was caused by other explosion (chain reaction)
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
index 806112a8..a2635e3b 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
@@ -8,6 +8,9 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called when an enderman tries to teleport to escape
+ */
 public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
     @NotNull private final Reason reason;
 
@@ -62,6 +65,9 @@ public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
         cancelled = cancel;
     }
 
+    /**
+     * Escape reason
+     */
     public enum Reason {
         /**
          * The enderman has stopped attacking and ran away
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
index 12194f1f..e974323d 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
@@ -66,6 +66,9 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
         cancelled = cancel;
     }
 
+    /**
+     * Transformed reason
+     */
     public enum TransformedReason {
         /**
          * When a zombie drowns
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
index 5351b523..f00594fb 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
@@ -9,6 +9,9 @@ import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Called when a witch prepares a potion
+ */
 public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
     private ItemStack potion;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index 5b28e9b1..dbda6634 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -11,6 +11,9 @@ import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Method handle event executor
+ */
 public class MethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index c8367242..d28f8f0f 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -15,6 +15,9 @@ import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Static method handle event executor
+ */
 public class StaticMethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index b6e7d8ee..55770ba8 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -11,6 +11,9 @@ import org.objectweb.asm.commons.GeneratorAdapter;
 
 import static org.objectweb.asm.Opcodes.*;
 
+/**
+ * ASM event executor generator
+ */
 public class ASMEventExecutorGenerator {
     @NotNull
     public static byte[] generateEventExecutor(@NotNull Method m, @NotNull String name) {
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
index f79685b4..75810a09 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.event.executor.asm;
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Class definer
+ */
 public interface ClassDefiner {
 
     /**
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index ac99477e..d2bd9211 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -9,6 +9,9 @@ import com.google.common.collect.MapMaker;
 import org.jetbrains.annotations.NotNull;
 import org.objectweb.asm.Type;
 
+/**
+ * Safe class definer
+ */
 public class SafeClassDefiner implements ClassDefiner {
     /* default */ static final SafeClassDefiner INSTANCE = new SafeClassDefiner();
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
index e406ce63..4cc1012c 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -80,6 +80,9 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
         return HANDLERS;
     }
 
+    /**
+     * Armor slot type
+     */
     public enum SlotType {
         HEAD(NETHERITE_HELMET, DIAMOND_HELMET, GOLDEN_HELMET, IRON_HELMET, CHAINMAIL_HELMET, LEATHER_HELMET, CARVED_PUMPKIN, PLAYER_HEAD, SKELETON_SKULL, ZOMBIE_HEAD, CREEPER_HEAD, WITHER_SKELETON_SKULL, TURTLE_HELMET),
         CHEST(NETHERITE_CHESTPLATE, DIAMOND_CHESTPLATE, GOLDEN_CHESTPLATE, IRON_CHESTPLATE, CHAINMAIL_CHESTPLATE, LEATHER_CHESTPLATE, ELYTRA),
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
index 12c1c6fe..1f623010 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
@@ -59,7 +59,9 @@ public class PlayerConnectionCloseEvent extends Event {
     }
 
     /**
-     * Returns the {@code UUID} of the player disconnecting.
+     * Get the {@code UUID} of the player disconnecting.
+     *
+     * @return the {@code UUID} of the player disconnecting
      */
     @NotNull
     public UUID getPlayerUniqueId() {
@@ -67,7 +69,9 @@ public class PlayerConnectionCloseEvent extends Event {
     }
 
     /**
-     * Returns the name of the player disconnecting.
+     * Get the name of the player disconnecting.
+     *
+     * @return the name of the player disconnecting
      */
     @NotNull
     public String getPlayerName() {
@@ -75,7 +79,9 @@ public class PlayerConnectionCloseEvent extends Event {
     }
 
     /**
-     * Returns the player's IP address.
+     * Get the player's IP address.
+     *
+     * @return the player's IP address
      */
     @NotNull
     public InetAddress getIpAddress() {
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
index 09cfdf48..20f8201d 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
@@ -6,6 +6,9 @@ import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.EquipmentSlot;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called when a player uses (interacts with) an unknown entity
+ */
 public class PlayerUseUnknownEntityEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
index 77a19995..cb43359e 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
@@ -105,6 +105,9 @@ public final class GS4QueryEvent extends Event {
         ;
     }
 
+    /**
+     * Query response
+     */
     public final static class QueryResponse {
         private final String motd;
         private final String gameVersion;
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
index eac85f1f..3ae058eb 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
@@ -4,6 +4,9 @@ import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called at the beginning of the server tick
+ */
 public class ServerTickStartEvent extends Event {
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/com/destroystokyo/paper/inventory/meta/ArmorStandMeta.java b/src/main/java/com/destroystokyo/paper/inventory/meta/ArmorStandMeta.java
index 7e4acfff..333812f3 100644
--- a/src/main/java/com/destroystokyo/paper/inventory/meta/ArmorStandMeta.java
+++ b/src/main/java/com/destroystokyo/paper/inventory/meta/ArmorStandMeta.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.inventory.meta;
 
 import org.bukkit.inventory.meta.ItemMeta;
 
+/**
+ * Armor stand meta
+ */
 public interface ArmorStandMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
index fd184f13..302059e9 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
@@ -6,6 +6,9 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called when a lootable inventory replenishes it's contents
+ */
 public class LootableInventoryReplenishEvent extends PlayerEvent implements Cancellable {
     @NotNull private final LootableInventory inventory;
 
diff --git a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
index 9db0056a..680410d8 100644
--- a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
+++ b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.util;
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Sneaky sneaky
+ */
 public class SneakyThrow {
 
     public static void sneaky(@NotNull Throwable exception) {
diff --git a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
index a736d7bc..4825c9ca 100644
--- a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
@@ -5,6 +5,9 @@ import net.kyori.adventure.text.format.NamedTextColor;
 import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Version fetcher
+ */
 public interface VersionFetcher {
     /**
      * Amount of time to cache results for in milliseconds
@@ -26,6 +29,9 @@ public interface VersionFetcher {
     @NotNull
     Component getVersionMessage(@NotNull String serverVersion);
 
+    /**
+     * Dummy version fetcher
+     */
     class DummyVersionFetcher implements VersionFetcher {
 
         @Override
diff --git a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
index 5bb677ce..613f00fa 100644
--- a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
+++ b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
@@ -5,6 +5,11 @@ import java.util.concurrent.atomic.LongAdder;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Cached size concurrent linked queue
+ *
+ * @param <E> Element type
+ */
 public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E> {
     private final LongAdder cachedSize = new LongAdder();
 
diff --git a/src/main/java/io/papermc/paper/inventory/ItemRarity.java b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
index 74ef8395..b974627a 100644
--- a/src/main/java/io/papermc/paper/inventory/ItemRarity.java
+++ b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
@@ -19,7 +19,7 @@ public enum ItemRarity {
 
     /**
      * Gets the color formatting associated with the rarity.
-     * @return
+     * @return TextColor
      */
     @NotNull
     public TextColor getColor() {
diff --git a/src/main/java/io/papermc/paper/world/MoonPhase.java b/src/main/java/io/papermc/paper/world/MoonPhase.java
index df051533..ebf70fea 100644
--- a/src/main/java/io/papermc/paper/world/MoonPhase.java
+++ b/src/main/java/io/papermc/paper/world/MoonPhase.java
@@ -5,6 +5,9 @@ import org.jetbrains.annotations.NotNull;
 import java.util.HashMap;
 import java.util.Map;
 
+/**
+ * Moon phase
+ */
 public enum MoonPhase {
     FULL_MOON(0L),
     WANING_GIBBOUS(1L),
diff --git a/src/main/java/net/pl3x/purpur/event/ExecuteCommandEvent.java b/src/main/java/net/pl3x/purpur/event/ExecuteCommandEvent.java
new file mode 100644
index 00000000..3250bd4d
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/ExecuteCommandEvent.java
@@ -0,0 +1,130 @@
+package net.pl3x.purpur.event;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * This event is called whenever someone runs a command
+ */
+public class ExecuteCommandEvent extends Event implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancel = false;
+    private CommandSender sender;
+    private Command command;
+    private String label;
+    private String[] args;
+
+    public ExecuteCommandEvent(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @Nullable String[] args) {
+        this.sender = sender;
+        this.command = command;
+        this.label = label;
+        this.args = args;
+    }
+
+    /**
+     * Gets the command that the player is attempting to execute.
+     *
+     * @return Command the player is attempting to execute
+     */
+    @NotNull
+    public Command getCommand() {
+        return command;
+    }
+
+    /**
+     * Sets the command that the player will execute.
+     *
+     * @param command New command that the player will execute
+     * @throws IllegalArgumentException if command is null or empty
+     */
+    public void setCommand(@NotNull Command command) throws IllegalArgumentException {
+        Validate.notNull(command, "Command cannot be null");
+        this.command = command;
+    }
+
+    /**
+     * Gets the sender that this command will be executed as.
+     *
+     * @return Sender this command will be executed as
+     */
+    @NotNull
+    public CommandSender getSender() {
+        return sender;
+    }
+
+    /**
+     * Sets the sender that this command will be executed as.
+     *
+     * @param sender New sender which this event will execute as
+     * @throws IllegalArgumentException if the sender provided is null
+     */
+    public void setSender(@NotNull final CommandSender sender) throws IllegalArgumentException {
+        Validate.notNull(sender, "Sender cannot be null");
+        this.sender = sender;
+    }
+
+    /**
+     * Get the label used to execute this command
+     *
+     * @return Label used to execute this command
+     */
+    @NotNull
+    public String getLabel() {
+        return label;
+    }
+
+    /**
+     * Set the label used to execute this command
+     *
+     * @param label Label used
+     */
+    public void setLabel(@NotNull String label) {
+        this.label = label;
+    }
+
+    /**
+     * Get the args passed to the command
+     *
+     * @return Args passed to the command
+     */
+    @NotNull
+    public String[] getArgs() {
+        return args;
+    }
+
+    /**
+     * Set the args passed to the command
+     *
+     * @param args Args passed to the command
+     */
+    public void setArgs(@NotNull String[] args) {
+        this.args = args;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/PlayerAFKEvent.java b/src/main/java/net/pl3x/purpur/event/PlayerAFKEvent.java
new file mode 100644
index 00000000..0c8b3e5e
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/PlayerAFKEvent.java
@@ -0,0 +1,70 @@
+package net.pl3x.purpur.event;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class PlayerAFKEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private final boolean setAfk;
+    private boolean shouldKick;
+    private String broadcast;
+    private boolean cancel;
+
+    public PlayerAFKEvent(@NotNull Player player, boolean setAfk, boolean shouldKick, @Nullable String broadcast, boolean async) {
+        super(player, async);
+        this.setAfk = setAfk;
+        this.shouldKick = shouldKick;
+        this.broadcast = broadcast;
+    }
+
+    /**
+     * Whether player is going afk or coming back
+     *
+     * @return True if going afk. False is coming back
+     */
+    public boolean isGoingAfk() {
+        return setAfk;
+    }
+
+    public boolean shouldKick() {
+        return shouldKick;
+    }
+
+    public void setShouldKick(boolean shouldKick) {
+        this.shouldKick = shouldKick;
+    }
+
+    @Nullable
+    public String getBroadcastMsg() {
+        return broadcast;
+    }
+
+    public void setBroadcastMsg(@Nullable String broadcast) {
+        this.broadcast = broadcast;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/PlayerSetSpawnerTypeWithEggEvent.java b/src/main/java/net/pl3x/purpur/event/PlayerSetSpawnerTypeWithEggEvent.java
new file mode 100644
index 00000000..c050b75e
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/PlayerSetSpawnerTypeWithEggEvent.java
@@ -0,0 +1,85 @@
+package net.pl3x.purpur.event;
+
+import org.bukkit.block.Block;
+import org.bukkit.block.CreatureSpawner;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+public class PlayerSetSpawnerTypeWithEggEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private final Block block;
+    private final CreatureSpawner spawner;
+    private EntityType type;
+    private boolean cancel;
+
+    public PlayerSetSpawnerTypeWithEggEvent(@NotNull Player player, @NotNull Block block, @NotNull CreatureSpawner spawner, @NotNull EntityType type) {
+        super(player);
+        this.block = block;
+        this.spawner = spawner;
+        this.type = type;
+    }
+
+    /**
+     * Get the spawner Block in the world
+     *
+     * @return Spawner Block
+     */
+    @NotNull
+    public Block getBlock() {
+        return block;
+    }
+
+    /**
+     * Get the spawner state
+     *
+     * @return Spawner state
+     */
+    @NotNull
+    public CreatureSpawner getSpawner() {
+        return spawner;
+    }
+
+    /**
+     * Gets the EntityType being set on the spawner
+     *
+     * @return EntityType being set
+     */
+    @NotNull
+    public EntityType getEntityType() {
+        return type;
+    }
+
+    /**
+     * Sets the EntityType being set on the spawner
+     *
+     * @param type EntityType to set
+     */
+    public void setEntityType(@NotNull EntityType type) {
+        this.type = type;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/EntityTeleportHinderedEvent.java b/src/main/java/net/pl3x/purpur/event/entity/EntityTeleportHinderedEvent.java
new file mode 100644
index 00000000..e6fcc402
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/EntityTeleportHinderedEvent.java
@@ -0,0 +1,117 @@
+package net.pl3x.purpur.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Fired when an entity is hindered from teleporting.
+ */
+public class EntityTeleportHinderedEvent extends EntityEvent {
+  private static final HandlerList handlers = new HandlerList();
+
+  @NotNull
+  private final Reason reason;
+
+  @Nullable
+  private final TeleportCause teleportCause;
+
+  private boolean retry = false;
+
+  public EntityTeleportHinderedEvent(@NotNull Entity what, @NotNull Reason reason,
+      @Nullable TeleportCause teleportCause) {
+    super(what);
+    this.reason = reason;
+    this.teleportCause = teleportCause;
+  }
+
+  /**
+   * @return why the teleport was hindered.
+   */
+  @NotNull
+  public Reason getReason() {
+    return reason;
+  }
+
+  /**
+   * @return why the teleport occurred if cause was given, otherwise {@code null}.
+   */
+  @Nullable
+  public TeleportCause getTeleportCause() {
+    return teleportCause;
+  }
+
+  /**
+   * Whether the teleport should be retried.
+   * <p>
+   * Note that this can put the server in a never-ending loop of trying to teleport someone resulting in a stack
+   * overflow. Do not retry more than necessary.
+   * </p>
+   *
+   * @return whether the teleport should be retried.
+   */
+  public boolean shouldRetry() {
+    return retry;
+  }
+
+  /**
+   * Sets whether the teleport should be retried.
+   * <p>
+   * Note that this can put the server in a never-ending loop of trying to teleport someone resulting in a stack
+   * overflow. Do not retry more than necessary.
+   * </p>
+   *
+   * @param retry whether the teleport should be retried.
+   */
+  public void setShouldRetry(boolean retry) {
+    this.retry = retry;
+  }
+
+  /**
+   * Calls the event and tests if should retry.
+   *
+   * @return whether the teleport should be retried.
+   */
+  @Override
+  public boolean callEvent() {
+    super.callEvent();
+    return shouldRetry();
+  }
+
+  @Override
+  @NotNull
+  public HandlerList getHandlers() {
+    return handlers;
+  }
+
+  @NotNull
+  public static HandlerList getHandlerList() {
+    return handlers;
+  }
+
+  /**
+   * Reason for hindrance in teleports.
+   */
+  public enum Reason {
+    /**
+     * The teleported entity is a passenger of another entity.
+     */
+    IS_PASSENGER,
+
+    /**
+     * The teleported entity has passengers.
+     */
+    IS_VEHICLE,
+
+    /**
+     * The teleport event was cancelled.
+     * <p>
+     * This is only caused by players teleporting.
+     * </p>
+     */
+    EVENT_CANCELLED,
+  }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/LlamaJoinCaravanEvent.java b/src/main/java/net/pl3x/purpur/event/entity/LlamaJoinCaravanEvent.java
new file mode 100644
index 00000000..6e68c139
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/LlamaJoinCaravanEvent.java
@@ -0,0 +1,61 @@
+package net.pl3x.purpur.event.entity;
+
+import org.bukkit.entity.Llama;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a Llama tries to join a caravan.
+ * <p>
+ * Cancelling the event will not let the Llama join. To prevent future attempts
+ * at joining a caravan use {@link Llama#setShouldJoinCaravan(boolean)}.
+ */
+public class LlamaJoinCaravanEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean canceled;
+    private final Llama head;
+
+    public LlamaJoinCaravanEvent(@NotNull Llama llama, @NotNull Llama head) {
+        super(llama);
+        this.head = head;
+    }
+
+    @Override
+    @NotNull
+    public Llama getEntity() {
+        return (Llama) entity;
+    }
+
+    /**
+     * Get the Llama that this Llama is about to follow
+     *
+     * @return Llama about to be followed
+     */
+    @NotNull
+    public Llama getHead() {
+        return head;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return canceled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        canceled = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/LlamaLeaveCaravanEvent.java b/src/main/java/net/pl3x/purpur/event/entity/LlamaLeaveCaravanEvent.java
new file mode 100644
index 00000000..ec8d978c
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/LlamaLeaveCaravanEvent.java
@@ -0,0 +1,34 @@
+package net.pl3x.purpur.event.entity;
+
+import org.bukkit.entity.Llama;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a Llama leaves a caravan
+ */
+public class LlamaLeaveCaravanEvent extends EntityEvent {
+    private static final HandlerList handlers = new HandlerList();
+
+    public LlamaLeaveCaravanEvent(@NotNull Llama llama) {
+        super(llama);
+    }
+
+    @Override
+    @NotNull
+    public Llama getEntity() {
+        return (Llama) entity;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/MonsterEggSpawnEvent.java b/src/main/java/net/pl3x/purpur/event/entity/MonsterEggSpawnEvent.java
new file mode 100644
index 00000000..8f1c9c42
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/MonsterEggSpawnEvent.java
@@ -0,0 +1,67 @@
+package net.pl3x.purpur.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MonsterEggSpawnEvent extends Event implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean canceled;
+
+    private final Player player;
+    private Entity entity;
+    private final ItemStack item;
+
+    public MonsterEggSpawnEvent(@Nullable HumanEntity player, @NotNull Entity entity, @NotNull ItemStack item) {
+        this.player = (Player) player;
+        this.entity = entity;
+        this.item = item;
+    }
+
+    @Nullable
+    public Player getPlayer() {
+        return player;
+    }
+
+    @NotNull
+    public Entity getEntity() {
+        return entity;
+    }
+
+    public void setEntity(@Nullable Entity entity) {
+        if (entity == null) {
+            canceled = true;
+            return;
+        }
+        this.entity = entity;
+    }
+
+    @NotNull
+    public ItemStack getItem() {
+        return item;
+    }
+
+    public boolean isCancelled() {
+        return canceled;
+    }
+
+    public void setCancelled(boolean cancel) {
+        canceled = cancel;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/RidableMoveEvent.java b/src/main/java/net/pl3x/purpur/event/entity/RidableMoveEvent.java
new file mode 100644
index 00000000..48e7ac39
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/RidableMoveEvent.java
@@ -0,0 +1,103 @@
+package net.pl3x.purpur.event.entity;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.Location;
+import org.bukkit.entity.Mob;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Triggered when a ridable mob moves with a rider
+ */
+public class RidableMoveEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean canceled;
+    private final Player rider;
+    private Location from;
+    private Location to;
+
+    public RidableMoveEvent(@NotNull Mob entity, @NotNull Player rider, @NotNull Location from, @NotNull Location to) {
+        super(entity);
+        this.rider = rider;
+        this.from = from;
+        this.to = to;
+    }
+
+    @Override
+    @NotNull
+    public Mob getEntity() {
+        return (Mob) entity;
+    }
+
+    @NotNull
+    public Player getRider() {
+        return rider;
+    }
+
+    public boolean isCancelled() {
+        return canceled;
+    }
+
+    public void setCancelled(boolean cancel) {
+        canceled = cancel;
+    }
+
+    /**
+     * Gets the location this entity moved from
+     *
+     * @return Location the entity moved from
+     */
+    @NotNull
+    public Location getFrom() {
+        return from;
+    }
+
+    /**
+     * Sets the location to mark as where the entity moved from
+     *
+     * @param from New location to mark as the entity's previous location
+     */
+    public void setFrom(@NotNull Location from) {
+        validateLocation(from);
+        this.from = from;
+    }
+
+    /**
+     * Gets the location this entity moved to
+     *
+     * @return Location the entity moved to
+     */
+    @NotNull
+    public Location getTo() {
+        return to;
+    }
+
+    /**
+     * Sets the location that this entity will move to
+     *
+     * @param to New Location this entity will move to
+     */
+    public void setTo(@NotNull Location to) {
+        validateLocation(to);
+        this.to = to;
+    }
+
+    private void validateLocation(@NotNull Location loc) {
+        Preconditions.checkArgument(loc != null, "Cannot use null location!");
+        Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/entity/RidableSpacebarEvent.java b/src/main/java/net/pl3x/purpur/event/entity/RidableSpacebarEvent.java
new file mode 100644
index 00000000..c0ec5a13
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/entity/RidableSpacebarEvent.java
@@ -0,0 +1,37 @@
+package net.pl3x.purpur.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+public class RidableSpacebarEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+
+    public RidableSpacebarEvent(@NotNull Entity entity) {
+        super(entity);
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        cancelled = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/inventory/AnvilTakeResultEvent.java b/src/main/java/net/pl3x/purpur/event/inventory/AnvilTakeResultEvent.java
new file mode 100644
index 00000000..85663c0a
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/inventory/AnvilTakeResultEvent.java
@@ -0,0 +1,52 @@
+package net.pl3x.purpur.event.inventory;
+
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.inventory.InventoryEvent;
+import org.bukkit.inventory.AnvilInventory;
+import org.bukkit.inventory.InventoryView;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a player takes the result item out of an anvil
+ */
+public class AnvilTakeResultEvent extends InventoryEvent {
+    private static final HandlerList handlers = new HandlerList();
+    private final Player player;
+    private final ItemStack result;
+
+    public AnvilTakeResultEvent(@NotNull HumanEntity player, @NotNull InventoryView view, @NotNull ItemStack result) {
+        super(view);
+        this.player = (Player) player;
+        this.result = result;
+    }
+
+    @NotNull
+    public Player getPlayer() {
+        return player;
+    }
+
+    @NotNull
+    public ItemStack getResult() {
+        return result;
+    }
+
+    @NotNull
+    @Override
+    public AnvilInventory getInventory() {
+        return (AnvilInventory) super.getInventory();
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/inventory/AnvilUpdateResultEvent.java b/src/main/java/net/pl3x/purpur/event/inventory/AnvilUpdateResultEvent.java
new file mode 100644
index 00000000..2717ad82
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/inventory/AnvilUpdateResultEvent.java
@@ -0,0 +1,35 @@
+package net.pl3x.purpur.event.inventory;
+
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.inventory.InventoryEvent;
+import org.bukkit.inventory.AnvilInventory;
+import org.bukkit.inventory.InventoryView;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when anvil slots change, triggering the result slot to be updated
+ */
+public class AnvilUpdateResultEvent extends InventoryEvent {
+    private static final HandlerList handlers = new HandlerList();
+
+    public AnvilUpdateResultEvent(@NotNull InventoryView view) {
+        super(view);
+    }
+
+    @NotNull
+    @Override
+    public AnvilInventory getInventory() {
+        return (AnvilInventory) super.getInventory();
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/player/PlayerBookTooLargeEvent.java b/src/main/java/net/pl3x/purpur/event/player/PlayerBookTooLargeEvent.java
new file mode 100644
index 00000000..39378ee2
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/player/PlayerBookTooLargeEvent.java
@@ -0,0 +1,65 @@
+package net.pl3x.purpur.event.player;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a player tries to bypass book limitations
+ */
+public class PlayerBookTooLargeEvent extends PlayerEvent {
+    private static final HandlerList handlers = new HandlerList();
+    private final ItemStack book;
+    private boolean kickPlayer = true;
+
+    /**
+     * @param player The player
+     * @param book The book
+     */
+    public PlayerBookTooLargeEvent(@NotNull Player player, @NotNull ItemStack book) {
+        super(player, !Bukkit.isPrimaryThread());
+        this.book = book;
+    }
+
+    /**
+     * Get the book containing the wanted edits
+     *
+     * @return The book
+     */
+    @NotNull
+    public ItemStack getBook() {
+        return book;
+    }
+
+    /**
+     * Whether server should kick the player or not
+     *
+     * @return True to kick player
+     */
+    public boolean shouldKickPlayer() {
+        return kickPlayer;
+    }
+
+    /**
+     * Whether server should kick the player or not
+     *
+     * @param kickPlayer True to kick player
+     */
+    public void setShouldKickPlayer(boolean kickPlayer) {
+        this.kickPlayer = kickPlayer;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/pl3x/purpur/event/world/StructureGenerateEvent.java b/src/main/java/net/pl3x/purpur/event/world/StructureGenerateEvent.java
new file mode 100644
index 00000000..e77f45f7
--- /dev/null
+++ b/src/main/java/net/pl3x/purpur/event/world/StructureGenerateEvent.java
@@ -0,0 +1,68 @@
+package net.pl3x.purpur.event.world;
+
+import org.bukkit.Bukkit;
+import org.bukkit.StructureType;
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+public class StructureGenerateEvent extends WorldEvent implements Cancellable {
+  private static final HandlerList handlers = new HandlerList();
+
+  @NotNull
+  private final StructureType structureType;
+  private final int chunkX;
+  private final int chunkZ;
+
+  private boolean cancel = false;
+
+  public StructureGenerateEvent(@NotNull World world,
+      @NotNull StructureType structureType, int chunkX, int chunkZ) {
+    super(!Bukkit.isPrimaryThread(), world); // Structure generation is not necessarily on the main thread as of 1.16.
+    this.structureType = structureType;
+    this.chunkX = chunkX;
+    this.chunkZ = chunkZ;
+  }
+
+  @NotNull
+  @Override
+  public World getWorld() {
+    return super.getWorld();
+  }
+
+  @NotNull
+  public StructureType getStructureType() {
+    return structureType;
+  }
+
+  public int getChunkX() {
+    return chunkX;
+  }
+
+  public int getChunkZ() {
+    return chunkZ;
+  }
+
+  @Override
+  public void setCancelled(boolean cancel) {
+    this.cancel = cancel;
+  }
+
+  @Override
+  public boolean isCancelled() {
+    return this.cancel;
+  }
+
+  @NotNull
+  @Override
+  public HandlerList getHandlers() {
+    return handlers;
+  }
+
+  @NotNull
+  public static HandlerList getHandlerList() {
+    return handlers;
+  }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 88b33dbd..34902835 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -346,7 +346,7 @@ public final class Bukkit {
      * @return the number of players
      * @deprecated in favour of {@link Server#broadcast(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public static int broadcastMessage(@NotNull String message) {
         return server.broadcastMessage(message);
     }
@@ -1045,7 +1045,7 @@ public final class Bukkit {
      * @return number of message recipients
      * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public static int broadcast(@NotNull String message, @NotNull String permission) {
         return server.broadcast(message, permission);
     }
@@ -1322,7 +1322,7 @@ public final class Bukkit {
      *
      * @see InventoryType#isCreatable()
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
         return server.createInventory(owner, type, title);
@@ -1372,7 +1372,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the size is not a multiple of 9
      * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
@@ -1399,7 +1399,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public static Merchant createMerchant(@Nullable String title) {
         return server.createMerchant(title);
     }
@@ -1488,7 +1488,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link #motd()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public static String getMotd() {
         return server.getMotd();
     }
@@ -1510,7 +1510,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link #shutdownMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public static String getShutdownMessage() {
         return server.getShutdownMessage();
     }
@@ -2061,4 +2061,24 @@ public final class Bukkit {
     public static Server.Spigot spigot() {
         return server.spigot();
     }
+
+    // Purpur start
+    /**
+     * Get the name of this server
+     * @return the name of the server
+     */
+    @NotNull
+    public static String getServerName() {
+        return server.getServerName();
+    }
+
+    /**
+     * Check if server is lagging according to laggy threshold setting
+     *
+     * @return True if lagging
+     */
+    public static boolean isLagging() {
+        return server.isLagging();
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 4594701d..499b222d 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -413,4 +413,30 @@ public enum ChatColor {
             BY_CHAR.put(color.code, color);
         }
     }
+
+    // Purpur start
+    public static final Pattern HEX_PATTERN = Pattern.compile("(#[A-Fa-f0-9]{6})");
+
+    @Nullable
+    public static String replaceHex(@Nullable String str) {
+        if (str != null) {
+            java.util.regex.Matcher matcher = HEX_PATTERN.matcher(str);
+            while (matcher.find()) {
+                String group = matcher.group(1);
+                str = str.replace(group, net.md_5.bungee.api.ChatColor.of(group).toString());
+            }
+        }
+        return str;
+    }
+
+    @Nullable
+    public static String color(@Nullable String str) {
+        return color(str, true);
+    }
+
+    @Nullable
+    public static String color(@Nullable String str, boolean parseHex) {
+        return str != null ? net.md_5.bungee.api.ChatColor.translateAlternateColorCodes('&', parseHex ? replaceHex(str) : str) : str;
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/Fluid.java b/src/main/java/org/bukkit/Fluid.java
index 525ede42..a0279fcb 100644
--- a/src/main/java/org/bukkit/Fluid.java
+++ b/src/main/java/org/bukkit/Fluid.java
@@ -3,6 +3,9 @@ package org.bukkit;
 import java.util.Locale;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a fluid
+ */
 public enum Fluid implements Keyed {
 
     WATER,
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 08eb0cc6..1f113c6b 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -9819,4 +9819,40 @@ public enum Material implements Keyed {
             // </editor-fold>
         }
     }
+
+    // Purpur start
+    public boolean isArmor() {
+        switch (this) {
+            // <editor-fold defaultstate="collapsed" desc="isarmor">
+            case LEATHER_BOOTS:
+            case LEATHER_CHESTPLATE:
+            case LEATHER_HELMET:
+            case LEATHER_LEGGINGS:
+            case CHAINMAIL_BOOTS:
+            case CHAINMAIL_CHESTPLATE:
+            case CHAINMAIL_HELMET:
+            case CHAINMAIL_LEGGINGS:
+            case IRON_BOOTS:
+            case IRON_CHESTPLATE:
+            case IRON_HELMET:
+            case IRON_LEGGINGS:
+            case GOLDEN_BOOTS:
+            case GOLDEN_CHESTPLATE:
+            case GOLDEN_HELMET:
+            case GOLDEN_LEGGINGS:
+            case DIAMOND_BOOTS:
+            case DIAMOND_CHESTPLATE:
+            case DIAMOND_HELMET:
+            case DIAMOND_LEGGINGS:
+            case NETHERITE_BOOTS:
+            case NETHERITE_CHESTPLATE:
+            case NETHERITE_HELMET:
+            case NETHERITE_LEGGINGS:
+            case TURTLE_HELMET:
+                return true;
+            default:
+                return false;
+        }
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java
index 2acdf2a6..737c3b05 100644
--- a/src/main/java/org/bukkit/Nameable.java
+++ b/src/main/java/org/bukkit/Nameable.java
@@ -2,6 +2,9 @@ package org.bukkit;
 
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents something that can be named
+ */
 public interface Nameable {
 
     // Paper start
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 3afd5f5c..7838731e 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -9,6 +9,9 @@ import org.bukkit.permissions.ServerOperator;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents an offline player
+ */
 public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
 
     /**
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 50de22d5..b8c380da 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -270,7 +270,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return the number of players
      * @deprecated use {@link #broadcast(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public int broadcastMessage(@NotNull String message);
 
     // Paper start
@@ -844,7 +844,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return number of message recipients
      * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public int broadcast(@NotNull String message, @NotNull String permission);
     // Paper start
     /**
@@ -1106,7 +1106,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @see InventoryType#isCreatable()
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);
 
@@ -1150,7 +1150,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @throws IllegalArgumentException if the size is not a multiple of 9
      * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;
 
@@ -1173,7 +1173,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     Merchant createMerchant(@Nullable String title);
 
     /**
@@ -1246,7 +1246,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated in favour of {@link #motd()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getMotd();
 
     // Paper start
@@ -1264,7 +1264,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated in favour of {@link #shutdownMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getShutdownMessage();
 
     /**
@@ -1650,6 +1650,9 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     UnsafeValues getUnsafe();
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot {
 
         @NotNull
@@ -1677,6 +1680,26 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
         }
         // Paper end
 
+        // Tuinity start - add config to timings report
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getTuinityConfig()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+        // Tuinity end - add config to timings report
+
+        // Purpur start
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getPurpurConfig() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @NotNull
+        public java.util.Properties getServerProperties() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+        // Purpur end
+
         /**
          * Sends the component to the player
          *
@@ -1787,4 +1810,20 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     io.papermc.paper.datapack.DatapackManager getDatapackManager();
     // Paper end
+
+    // Purpur start
+    /**
+     * Get the name of this server
+     * @return the name of the server
+     */
+    @NotNull
+    String getServerName();
+
+    /**
+     * Check if server is lagging according to laggy threshold setting
+     *
+     * @return True if lagging
+     */
+    boolean isLagging();
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 379acee1..b2502aaa 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -87,6 +87,8 @@ public interface UnsafeValues {
 
     /**
      * Called once by the version command on first use, then cached.
+     *
+     * @return Paper's VersionFetcher
      */
     default com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
         return new com.destroystokyo.paper.util.VersionFetcher.DummyVersionFetcher();
@@ -105,6 +107,8 @@ public interface UnsafeValues {
     /**
      * Return the translation key for the Material, so the client can translate it into the active
      * locale when using a {@link net.kyori.adventure.text.TranslatableComponent}.
+     *
+     * @param mat Material to check
      * @return the translation key
      */
     String getTranslationKey(Material mat);
@@ -112,6 +116,8 @@ public interface UnsafeValues {
     /**
      * Return the translation key for the Block, so the client can translate it into the active
      * locale when using a {@link net.kyori.adventure.text.TranslatableComponent}.
+     *
+     * @param block Block to check
      * @return the translation key
      */
     String getTranslationKey(org.bukkit.block.Block block);
@@ -120,6 +126,8 @@ public interface UnsafeValues {
      * Return the translation key for the EntityType, so the client can translate it into the active
      * locale when using a {@link net.kyori.adventure.text.TranslatableComponent}.<br>
      * This is <code>null</code>, when the EntityType isn't known to NMS (custom entities)
+     *
+     * @param type EntityType to check
      * @return the translation key
      */
     String getTranslationKey(org.bukkit.entity.EntityType type);
@@ -135,6 +143,8 @@ public interface UnsafeValues {
      * Creates and returns the next EntityId available.
      * <p>
      * Use this when sending custom packets, so that there are no collisions on the client or server.
+     *
+     * @return the next available entity id
      */
     public int nextEntityId();
 
@@ -184,4 +194,28 @@ public interface UnsafeValues {
      */
     int getProtocolVersion();
     // Paper end
+
+    // Purpur start
+
+    /**
+     * Serialize entity to byte array
+     *
+     * @param entity entity to serialize
+     * @return serialized entity
+     */
+    byte[] serializeEntity(org.bukkit.entity.Entity entity);
+
+    /**
+     * Deserialize an entity from byte array
+     * <p>
+     * The entity is not automatically spawned in the world. You will have to spawn
+     * the entity yourself with {@link org.bukkit.entity.Entity#spawnAt(Location)} or
+     * {@link org.bukkit.entity.Entity#spawnAt(Location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)}
+     *
+     * @param data serialized entity
+     * @param world world entity belongs in
+     * @return deserialized entity
+     */
+    org.bukkit.entity.Entity deserializeEntity(byte[] data, org.bukkit.World world);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 8ae9198b..4017cc64 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -3639,6 +3639,26 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param viewDistance view distance in [2, 32]
      */
     void setNoTickViewDistance(int viewDistance);
+
+    // Tuinity start - add view distances
+    /**
+     * Gets the sending view distance for this world.
+     * <p>
+     * Sending view distance is the view distance where chunks will load in for players in this world.
+     * </p>
+     * @return The sending view distance for this world.
+     */
+    public int getSendViewDistance();
+
+    /**
+     * Sets the sending view distance for this world.
+     * <p>
+     * Sending view distance is the view distance where chunks will load in for players in this world.
+     * </p>
+     * @param viewDistance view distance in [2, 32] or -1
+     */
+    public void setSendViewDistance(int viewDistance);
+    // Tuinity end - add view distances
     // Paper end - view distance api
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/WorldBorder.java b/src/main/java/org/bukkit/WorldBorder.java
index afb7b136..087579fd 100644
--- a/src/main/java/org/bukkit/WorldBorder.java
+++ b/src/main/java/org/bukkit/WorldBorder.java
@@ -2,6 +2,9 @@ package org.bukkit;
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a world border
+ */
 public interface WorldBorder {
 
     /**
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index c0454d97..445c1c13 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -71,6 +71,8 @@ public class WorldCreator {
      *
      * @param levelName LevelName of the world that will be created
      * @param worldKey NamespacedKey of the world that will be created
+     *
+     * @return WorldCreator
      */
     @NotNull
     public static WorldCreator ofNameAndKey(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
@@ -82,6 +84,8 @@ public class WorldCreator {
      * LevelName will be the Key part of the NamespacedKey.
      *
      * @param worldKey NamespacedKey of the world that will be created
+     *
+     * @return WorldCreator
      */
     @NotNull
     public static WorldCreator ofKey(@NotNull NamespacedKey worldKey) {
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 7c500997..432caadb 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -3,6 +3,7 @@ package org.bukkit.advancement;
 import java.util.Collection;
 import org.bukkit.Keyed;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents an advancement that may be awarded to a player. This class is not
@@ -17,4 +18,12 @@ public interface Advancement extends Keyed {
      */
     @NotNull
     Collection<String> getCriteria();
+
+    /**
+     * Gets the display properties of this advancement
+     *
+     * @return The display properties
+     */
+    @Nullable
+    AdvancementDisplay getDisplay();
 }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementDisplay.java b/src/main/java/org/bukkit/advancement/AdvancementDisplay.java
new file mode 100644
index 00000000..2bb3b525
--- /dev/null
+++ b/src/main/java/org/bukkit/advancement/AdvancementDisplay.java
@@ -0,0 +1,56 @@
+package org.bukkit.advancement;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents an advancement's display
+ */
+public interface AdvancementDisplay {
+    /**
+     * Get the title of this advancement
+     *
+     * @return Title text
+     */
+    @NotNull
+    String getTitle();
+
+    /**
+     * Get the description of this advancement
+     *
+     * @return Description text
+     */
+    @NotNull
+    String getDescription();
+
+    /**
+     * Get the frame type of this advancement
+     *
+     * @return Frame type
+     */
+    @NotNull
+    FrameType getFrameType();
+
+    /**
+     * Get if this advancement should be announced in chat when completed
+     *
+     * @return True if should announce when completed
+     */
+    boolean shouldAnnounceChat();
+
+    /**
+     * Set if this advancement should be announced in chat when completed
+     *
+     * @param announceChat True or false
+     *
+     */
+    void shouldAnnounceChat(boolean announceChat);
+
+    /**
+     * Get if this advancement (and all it's children) is hidden from the advancement screen until it has been completed
+     * <p>
+     * This has no effect on root advancements themselves, but will alter their children
+     *
+     * @return True if hidden until completed
+     */
+    boolean isHidden();
+}
diff --git a/src/main/java/org/bukkit/advancement/FrameType.java b/src/main/java/org/bukkit/advancement/FrameType.java
new file mode 100644
index 00000000..a5db5238
--- /dev/null
+++ b/src/main/java/org/bukkit/advancement/FrameType.java
@@ -0,0 +1,30 @@
+package org.bukkit.advancement;
+
+import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents an advancement's display's frame type
+ */
+public enum FrameType {
+    TASK(ChatColor.GREEN),
+    CHALLENGE(ChatColor.DARK_PURPLE),
+    GOAL(ChatColor.GREEN);
+
+    private final ChatColor color;
+
+    FrameType(ChatColor color) {
+        this.color = color;
+    }
+
+    @NotNull
+    public ChatColor getColor() {
+        return color;
+    }
+
+    @NotNull
+    @Override
+    public String toString() {
+        return "FrameType[name=" + name() + ",color=" + color + "]";
+    }
+}
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index ca488173..3b6fd208 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -184,6 +184,9 @@ public interface Block extends Metadatable {
      * {@code int z = (int) ((packed << 10) >> 37);}
      * </p>
      *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
      * @return This block's x, y, and z coordinates packed into a long value
      */
     public static long getBlockKey(int x, int y, int z) {
diff --git a/src/main/java/org/bukkit/block/Lidded.java b/src/main/java/org/bukkit/block/Lidded.java
index 30c7df00..73930312 100644
--- a/src/main/java/org/bukkit/block/Lidded.java
+++ b/src/main/java/org/bukkit/block/Lidded.java
@@ -1,5 +1,8 @@
 package org.bukkit.block;
 
+/**
+ * Represents something that has a lid
+ */
 public interface Lidded {
 
     /**
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index c8d37184..46bae5c1 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -48,7 +48,7 @@ public interface Sign extends TileState, Colorable {
      * @deprecated in favour of {@link #lines()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String[] getLines();
 
     /**
@@ -62,7 +62,7 @@ public interface Sign extends TileState, Colorable {
      * @deprecated in favour of {@link #line(int)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getLine(int index) throws IndexOutOfBoundsException;
 
     /**
@@ -76,7 +76,7 @@ public interface Sign extends TileState, Colorable {
      * @throws IndexOutOfBoundsException If the index is out of the range 0..3
      * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;
 
     /**
diff --git a/src/main/java/org/bukkit/boss/BarColor.java b/src/main/java/org/bukkit/boss/BarColor.java
index e191d9ff..2ce32010 100644
--- a/src/main/java/org/bukkit/boss/BarColor.java
+++ b/src/main/java/org/bukkit/boss/BarColor.java
@@ -1,5 +1,8 @@
 package org.bukkit.boss;
 
+/**
+ * Bar color
+ */
 public enum BarColor {
     PINK,
     BLUE,
diff --git a/src/main/java/org/bukkit/boss/BarFlag.java b/src/main/java/org/bukkit/boss/BarFlag.java
index 69e02998..0d8f617d 100644
--- a/src/main/java/org/bukkit/boss/BarFlag.java
+++ b/src/main/java/org/bukkit/boss/BarFlag.java
@@ -1,5 +1,8 @@
 package org.bukkit.boss;
 
+/**
+ * Bar flag
+ */
 public enum BarFlag {
 
     /**
diff --git a/src/main/java/org/bukkit/boss/BarStyle.java b/src/main/java/org/bukkit/boss/BarStyle.java
index 3e499eb7..6907889b 100644
--- a/src/main/java/org/bukkit/boss/BarStyle.java
+++ b/src/main/java/org/bukkit/boss/BarStyle.java
@@ -1,5 +1,8 @@
 package org.bukkit.boss;
 
+/**
+ * Boss bar style
+ */
 public enum BarStyle {
     /**
      * Makes the boss bar solid (no segments)
diff --git a/src/main/java/org/bukkit/boss/BossBar.java b/src/main/java/org/bukkit/boss/BossBar.java
index 70274f2e..3b98e6e3 100644
--- a/src/main/java/org/bukkit/boss/BossBar.java
+++ b/src/main/java/org/bukkit/boss/BossBar.java
@@ -5,6 +5,9 @@ import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents a boss bar
+ */
 public interface BossBar {
 
     /**
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 096dca3b..63fbe319 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -62,6 +62,9 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
     public String getName();
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot {
 
         /**
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 74252236..c12de791 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -147,6 +147,19 @@ public class SimpleCommandMap implements CommandMap {
             return false;
         }
 
+        // Purpur start
+        String[] parsedArgs = Arrays.copyOfRange(args, 1, args.length);
+        net.pl3x.purpur.event.ExecuteCommandEvent event = new net.pl3x.purpur.event.ExecuteCommandEvent(sender, target, sentCommandLabel, parsedArgs);
+        if (!event.callEvent()) {
+            return true; // cancelled
+        }
+
+        sender = event.getSender();
+        target = event.getCommand();
+        sentCommandLabel = event.getLabel();
+        parsedArgs = event.getArgs();
+        // Purpur end
+
         // Paper start - Plugins do weird things to workaround normal registration
         if (target.timings == null) {
             target.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, target);
@@ -156,7 +169,7 @@ public class SimpleCommandMap implements CommandMap {
         try {
             try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
-            target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
+            target.execute(sender, sentCommandLabel, parsedArgs); // Purpur
             } // target.timings.stopTiming(); // Spigot // Paper
         } catch (CommandException ex) {
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerCommandException(ex, target, sender, args))); // Paper
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 1aa58c59..37cc5d7e 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -2,6 +2,7 @@ package org.bukkit.command.defaults;
 
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
@@ -11,6 +12,15 @@ import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
+// Spigot start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.PluginDescriptionFile;
+// Spigot end
 
 public class PluginsCommand extends BukkitCommand {
     public PluginsCommand(@NotNull String name) {
@@ -25,7 +35,13 @@ public class PluginsCommand extends BukkitCommand {
     public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
         if (!testPermission(sender)) return true;
 
-        sender.sendMessage("Plugins " + getPluginList());
+        // Spigot start
+        if (sender instanceof Player && sender.hasPermission("bukkit.command.version")) {
+            sender.spigot().sendMessage(getPluginListSpigot());
+        } else {
+            sender.sendMessage("Plugins " + getPluginList());
+        }
+        // Spigot end
         return true;
     }
 
@@ -71,4 +87,72 @@ public class PluginsCommand extends BukkitCommand {
         // Paper end
     }
 
+    // Spigot start
+    @NotNull
+    private BaseComponent[] getPluginListSpigot() {
+        Plugin[] plugins = Arrays.stream(Bukkit.getPluginManager().getPlugins()).sorted(Comparator.comparing(plugin -> plugin.getName().toLowerCase())).toArray(Plugin[]::new); // Purpur
+        ComponentBuilder pluginList = new ComponentBuilder("Plugins (" + plugins.length + "): ");
+
+        int index = 0;
+        for (Plugin plugin : plugins) {
+            if (index++ > 0) {
+                pluginList.append(", ", FormatRetention.NONE).color(net.md_5.bungee.api.ChatColor.WHITE);
+            }
+
+            // Event components
+            PluginDescriptionFile description = plugin.getDescription();
+            ComponentBuilder hoverEventComponents = new ComponentBuilder();
+            hoverEventComponents.append("Version: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getVersion()).color(net.md_5.bungee.api.ChatColor.GREEN);
+
+            if (description.getDescription() != null) {
+                hoverEventComponents.append("\nDescription: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getDescription()).color(net.md_5.bungee.api.ChatColor.GREEN);
+            }
+
+            if (description.getWebsite() != null) {
+                hoverEventComponents.append("\nWebsite: ").color(net.md_5.bungee.api.ChatColor.WHITE).append(description.getWebsite()).color(net.md_5.bungee.api.ChatColor.GREEN);
+            }
+
+            if (!description.getAuthors().isEmpty()) {
+                if (description.getAuthors().size() == 1) {
+                    hoverEventComponents.append("\nAuthor: ");
+                } else {
+                    hoverEventComponents.append("\nAuthors: ");
+                }
+
+                hoverEventComponents.color(net.md_5.bungee.api.ChatColor.WHITE).append(getAuthors(description));
+            }
+
+            HoverEvent hoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, hoverEventComponents.create());
+            ClickEvent clickEvent = new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/version " + description.getName());
+
+            // Plugin list entry
+            pluginList.append(plugin.getDescription().getName());
+            pluginList.color(plugin.isEnabled() ? net.md_5.bungee.api.ChatColor.GREEN : net.md_5.bungee.api.ChatColor.RED);
+            pluginList.event(hoverEvent).event(clickEvent);
+
+            if (plugin.getDescription().getProvides().size() > 0) {
+                pluginList.append("( ", FormatRetention.NONE).color(net.md_5.bungee.api.ChatColor.WHITE).append(String.join(", ", plugin.getDescription().getProvides())).append(")");
+            }
+        }
+
+        return pluginList.create();
+    }
+
+    @NotNull
+    private BaseComponent[] getAuthors(@NotNull final PluginDescriptionFile description) {
+        ComponentBuilder result = new ComponentBuilder();
+        List<String> authors = description.getAuthors();
+
+        for (int i = 0; i < authors.size(); i++) {
+            if (i > 0) {
+                result.append(i < authors.size() - 1 ? ", " : " and ", FormatRetention.NONE);
+                result.color(net.md_5.bungee.api.ChatColor.WHITE);
+            }
+
+            result.append(authors.get(i)).color(net.md_5.bungee.api.ChatColor.GREEN);
+        }
+
+        return result.create();
+    }
+    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 57a21495..7d9ffef4 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -168,14 +168,14 @@ public class VersionCommand extends BukkitCommand {
                 lastCheck = System.currentTimeMillis();
                 hasVersion = false;
             } else {
-                sender.sendMessage(versionMessage);
+                sendVersionMessage(sender); // Purpur
                 return;
             }
         }
         versionLock.lock();
         try {
             if (hasVersion) {
-                sender.sendMessage(versionMessage);
+                sendVersionMessage(sender); // Purpur
                 return;
             }
             versionWaiters.add(sender);
@@ -256,7 +256,7 @@ public class VersionCommand extends BukkitCommand {
             hasVersion = true;
             versionTaskStarted = false;
             for (CommandSender sender : versionWaiters) {
-                sender.sendMessage(versionMessage);
+                sendVersionMessage(sender); // Purpur
             }
             versionWaiters.clear();
         } finally {
@@ -284,4 +284,27 @@ public class VersionCommand extends BukkitCommand {
             return -1;
         }
     }
+
+    // Purpur start
+    private void sendVersionMessage(CommandSender sender) {
+        if (!(sender instanceof org.bukkit.command.ConsoleCommandSender)) {
+            sender.sendMessage(versionMessage);
+            return;
+        }
+        List<Component> list = new ArrayList<>();
+        if (versionMessage.children().size() == 1) {
+            versionMessage.children().get(0).children().forEach(child -> {
+                if (child.children().size() > 1) {
+                    list.addAll(child.children());
+                } else {
+                    list.add(child);
+                }
+            });
+        } else {
+            list.addAll(versionMessage.children());
+        }
+        list.removeIf(component -> net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer.plainText().serialize(component).equals("\n"));
+        list.forEach(sender::sendMessage);
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bf2407c8..ae09abfe 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -295,6 +295,9 @@ public class Conversation {
         }
     }
 
+    /**
+     * Conversation state
+     */
     public enum ConversationState {
         UNSTARTED,
         STARTED,
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
index 635e07a6..93d5fad6 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
@@ -226,6 +226,18 @@ public enum EnchantmentTarget {
         public boolean includes(@NotNull Material item) {
             return BREAKABLE.includes(item) || (WEARABLE.includes(item) && !item.equals(Material.ELYTRA)) || item.equals(Material.COMPASS);
         }
+        // Purpur start
+    },
+
+    /**
+     * Allow the Enchantment to be placed on bows and crossbows.
+     */
+    BOW_AND_CROSSBOW {
+        @Override
+        public boolean includes(@NotNull Material item) {
+            return item.equals(Material.BOW) || item.equals(Material.CROSSBOW);
+        }
+        // Purpur end
     };
 
     /**
diff --git a/src/main/java/org/bukkit/entity/AbstractArrow.java b/src/main/java/org/bukkit/entity/AbstractArrow.java
index b1d8007e..eb847e3b 100644
--- a/src/main/java/org/bukkit/entity/AbstractArrow.java
+++ b/src/main/java/org/bukkit/entity/AbstractArrow.java
@@ -176,6 +176,9 @@ public interface AbstractArrow extends Projectile {
         this.setPickupStatus(PickupStatus.valueOf(rule.name()));
     }
 
+    /**
+     * Pickup rule
+     */
     @Deprecated
     enum PickupRule {
         DISALLOWED,
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
index 2e17b2d4..93822347 100644
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java
@@ -4,6 +4,9 @@ import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents an animal tamer
+ */
 public interface AnimalTamer {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
index 21c8ec6d..d3eb843f 100644
--- a/src/main/java/org/bukkit/entity/ArmorStand.java
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java
@@ -7,6 +7,9 @@ import org.bukkit.util.EulerAngle;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents an armor stand
+ */
 public interface ArmorStand extends LivingEntity {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Arrow.java b/src/main/java/org/bukkit/entity/Arrow.java
index ec8443b6..6b41e09d 100644
--- a/src/main/java/org/bukkit/entity/Arrow.java
+++ b/src/main/java/org/bukkit/entity/Arrow.java
@@ -8,6 +8,9 @@ import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents an arrow
+ */
 public interface Arrow extends AbstractArrow {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Dolphin.java b/src/main/java/org/bukkit/entity/Dolphin.java
index f00eaadc..a4a64579 100644
--- a/src/main/java/org/bukkit/entity/Dolphin.java
+++ b/src/main/java/org/bukkit/entity/Dolphin.java
@@ -1,3 +1,6 @@
 package org.bukkit.entity;
 
+/**
+ * Represents a dolphin
+ */
 public interface Dolphin extends WaterMob { }
diff --git a/src/main/java/org/bukkit/entity/DragonFireball.java b/src/main/java/org/bukkit/entity/DragonFireball.java
index 6c475a37..210d955e 100644
--- a/src/main/java/org/bukkit/entity/DragonFireball.java
+++ b/src/main/java/org/bukkit/entity/DragonFireball.java
@@ -1,3 +1,6 @@
 package org.bukkit.entity;
 
+/**
+ * Represents a dragon's fireball
+ */
 public interface DragonFireball extends Fireball {}
diff --git a/src/main/java/org/bukkit/entity/Endermite.java b/src/main/java/org/bukkit/entity/Endermite.java
index 9e7f42ca..d71afdfa 100644
--- a/src/main/java/org/bukkit/entity/Endermite.java
+++ b/src/main/java/org/bukkit/entity/Endermite.java
@@ -1,26 +1,25 @@
 package org.bukkit.entity;
 
+/**
+ * Represents an endermite
+ */
 public interface Endermite extends Monster {
 
     /**
-     * Gets whether this Endermite was spawned by a player.
+     * Gets whether this Endermite was spawned by a player from throwing an ender pearl
      *
-     * An Endermite spawned by a player will be attacked by nearby Enderman.
+     * An Endermite spawned by a player might be attacked by nearby Enderman depending on purpur.yml settings
      *
      * @return player spawned status
-     * @deprecated this functionality no longer exists
      */
-    @Deprecated
     boolean isPlayerSpawned();
 
     /**
-     * Sets whether this Endermite was spawned by a player.
+     * Sets whether this Endermite was spawned by a player from throwing an ender pearl
      *
-     * An Endermite spawned by a player will be attacked by nearby Enderman.
+     * An Endermite spawned by a player might be attacked by nearby Enderman depending on purpur.yml settings
      *
      * @param playerSpawned player spawned status
-     * @deprecated this functionality no longer exists
      */
-    @Deprecated
     void setPlayerSpawned(boolean playerSpawned);
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index a9e455c5..c9d64da9 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -668,6 +668,9 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     Pose getPose();
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot extends CommandSender.Spigot {
 
     }
@@ -720,37 +723,108 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
 
     /**
      * Check if entity is in rain
+     *
+     * @return True if entity is in rain
      */
     public boolean isInRain();
 
     /**
      * Check if entity is in bubble column
+     *
+     * @return True if entity is in bubble column
      */
     public boolean isInBubbleColumn();
 
     /**
      * Check if entity is in water or rain
+     *
+     * @return True if entity is in water or rain
      */
     public boolean isInWaterOrRain();
 
     /**
      * Check if entity is in water or bubble column
+     *
+     * @return True if entity is in water or bubble column
      */
     public boolean isInWaterOrBubbleColumn();
 
     /**
      * Check if entity is in water or rain or bubble column
+     *
+     * @return True if entity is in water or rain or bubble column
      */
     public boolean isInWaterOrRainOrBubbleColumn();
 
     /**
      * Check if entity is in lava
+     *
+     * @return True if entity is in lava
      */
     public boolean isInLava();
 
     /**
      * Check if entity is inside a ticking chunk
+     *
+     * @return True if entity is ticking
      */
     public boolean isTicking();
     // Paper end
+
+    // Purpur start
+    /**
+     * Get the riding player
+     *
+     * @return Riding player
+     */
+    @Nullable
+    Player getRider();
+
+    /**
+     * Check if entity is being ridden
+     *
+     * @return True if being ridden
+     */
+    boolean hasRider();
+
+    /**
+     * Check if entity is ridable
+     *
+     * @return True if ridable
+     */
+    boolean isRidable();
+
+    /**
+     * Check if entity is ridable in water
+     *
+     * @return True if ridable in water
+     */
+    boolean isRidableInWater();
+
+    /**
+     * Spawn this entity in the world at the given {@link Location} with the default spawn reason.
+     *
+     * @param location The location at which to spawn the entity.
+     * @return Whether the entity was successfully spawned.
+     */
+    default boolean spawnAt(@NotNull Location location) {
+        return spawnAt(location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    /**
+     * Spawn this entity in the world at the given {@link Location} with the reason given.
+     *
+     * @param location The location at which to spawn the entity.
+     * @param spawnReason The reason for which the entity was spawned.
+     * @return Whether the entity was successfully spawned.
+     */
+    boolean spawnAt(@NotNull Location location, @NotNull org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason);
+
+    /**
+     * Checks if the entity is in daylight
+     *
+     * @return True if in daylight
+     */
+    boolean isInDaylight();
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index f415b61b..e501ef16 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -20,6 +20,9 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Entity type
+ */
 public enum EntityType implements Keyed {
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
diff --git a/src/main/java/org/bukkit/entity/Firework.java b/src/main/java/org/bukkit/entity/Firework.java
index d616d594..14bdddb7 100644
--- a/src/main/java/org/bukkit/entity/Firework.java
+++ b/src/main/java/org/bukkit/entity/Firework.java
@@ -3,6 +3,9 @@ package org.bukkit.entity;
 import org.bukkit.inventory.meta.FireworkMeta;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a firework
+ */
 public interface Firework extends Projectile {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Guardian.java b/src/main/java/org/bukkit/entity/Guardian.java
index 812af884..c1b1ac92 100644
--- a/src/main/java/org/bukkit/entity/Guardian.java
+++ b/src/main/java/org/bukkit/entity/Guardian.java
@@ -1,5 +1,8 @@
 package org.bukkit.entity;
 
+/**
+ * Represents a guardian
+ */
 public interface Guardian extends Monster {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/IronGolem.java b/src/main/java/org/bukkit/entity/IronGolem.java
index 655e37cb..09fd716c 100644
--- a/src/main/java/org/bukkit/entity/IronGolem.java
+++ b/src/main/java/org/bukkit/entity/IronGolem.java
@@ -19,4 +19,20 @@ public interface IronGolem extends Golem {
      *     player created, false if you want it to be a natural village golem.
      */
     public void setPlayerCreated(boolean playerCreated);
+
+    // Purpur start
+    /**
+     * Get the player that summoned this iron golem
+     *
+     * @return UUID of summoner
+     */
+    @org.jetbrains.annotations.Nullable java.util.UUID getSummoner();
+
+    /**
+     * Set the player that summoned this iron golem
+     *
+     * @param summoner UUID of summoner
+     */
+    void setSummoner(@org.jetbrains.annotations.Nullable java.util.UUID summoner);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Item.java b/src/main/java/org/bukkit/entity/Item.java
index 0ee07264..5b9a20e0 100644
--- a/src/main/java/org/bukkit/entity/Item.java
+++ b/src/main/java/org/bukkit/entity/Item.java
@@ -120,4 +120,62 @@ public interface Item extends Entity {
      */
     public void setWillAge(boolean willAge);
     // Paper end
+
+    // Purpur start
+    /**
+     * Set whether or not this item is immune to cactus
+     *
+     * @param immuneToCactus True to make immune to cactus
+     */
+    void setImmuneToCactus(boolean immuneToCactus);
+
+    /**
+     * Check if item is immune to cactus
+     *
+     * @return True if immune to cactus
+     */
+    boolean isImmuneToCactus();
+
+    /**
+     * Set whether or not this item is immune to explosions
+     *
+     * @param immuneToExplosion True to make immune to explosions
+     */
+    void setImmuneToExplosion(boolean immuneToExplosion);
+
+    /**
+     * Check if item is immune to explosions
+     *
+     * @return True if immune to explosions
+     */
+    boolean isImmuneToExplosion();
+
+    /**
+     * Set whether or not this item is immune to fire
+     *
+     * @param immuneToFire True to make immune to fire
+     */
+    void setImmuneToFire(boolean immuneToFire);
+
+    /**
+     * Check if item is immune to fire
+     *
+     * @return True if immune to fire
+     */
+    boolean isImmuneToFire();
+
+    /**
+     * Set whether or not this item is immune to lightning
+     *
+     * @param immuneToLightning True to make immune to lightning
+     */
+    void setImmuneToLightning(boolean immuneToLightning);
+
+    /**
+     * Check if item is immune to lightning
+     *
+     * @return True if immune to lightning
+     */
+    boolean isImmuneToLightning();
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/LightningStrike.java b/src/main/java/org/bukkit/entity/LightningStrike.java
index 2c81a3f6..efb308c8 100644
--- a/src/main/java/org/bukkit/entity/LightningStrike.java
+++ b/src/main/java/org/bukkit/entity/LightningStrike.java
@@ -15,6 +15,9 @@ public interface LightningStrike extends Entity {
     public boolean isEffect();
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot extends Entity.Spigot {
 
         /*
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 31353bd2..bbae010c 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -910,4 +910,41 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     void setHurtDirection(float hurtDirection);
     // Paper end
+
+    // Purpur start
+    /**
+     * Gets the distance (in blocks) this entity can safely fall without taking damage
+     *
+     * @return Safe fall distance
+     */
+    float getSafeFallDistance();
+
+    /**
+     * Set the distance (in blocks) this entity can safely fall without taking damage
+     *
+     * @param safeFallDistance Safe fall distance
+     */
+    void setSafeFallDistance(float safeFallDistance);
+
+    /**
+     * Play item break animation for the item in specified equipment slot
+     *
+     * @param slot Equipment slot to play break animation for
+     */
+    void broadcastItemBreak(@NotNull org.bukkit.inventory.EquipmentSlot slot);
+
+    /**
+     * If this mob will burn in the sunlight
+     *
+     * @return True if mob will burn in sunlight
+     */
+    boolean shouldBurnInDay();
+
+    /**
+     * Set if this mob should burn in the sunlight
+     *
+     * @param shouldBurnInDay True to burn in sunlight
+     */
+    void setShouldBurnInDay(boolean shouldBurnInDay);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Llama.java b/src/main/java/org/bukkit/entity/Llama.java
index d23226cc..1ef9479c 100644
--- a/src/main/java/org/bukkit/entity/Llama.java
+++ b/src/main/java/org/bukkit/entity/Llama.java
@@ -3,6 +3,7 @@ package org.bukkit.entity;
 import com.destroystokyo.paper.entity.RangedEntity;
 import org.bukkit.inventory.LlamaInventory;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable; // Purpur
 
 /**
  * Represents a Llama.
@@ -67,4 +68,65 @@ public interface Llama extends ChestedHorse, RangedEntity { // Paper
     @NotNull
     @Override
     LlamaInventory getInventory();
+
+    // Purpur start
+
+    /**
+     * Check if this Llama should attempt to join a caravan
+     *
+     * @return True if Llama is allowed to join a caravan
+     */
+    boolean shouldJoinCaravan();
+
+    /**
+     * Set if this Llama should attempt to join a caravan
+     *
+     * @param shouldJoinCaravan True to allow joining a caravan
+     */
+    void setShouldJoinCaravan(boolean shouldJoinCaravan);
+
+    /**
+     * Check if Llama is in a caravan
+     *
+     * @return True if in caravan
+     */
+    boolean inCaravan();
+
+    /**
+     * Join a caravan
+     *
+     * @param llama Head of caravan to join
+     */
+    void joinCaravan(@NotNull Llama llama);
+
+    /**
+     * Leave current caravan if in one
+     */
+    void leaveCaravan();
+
+    /**
+     * Check if another Llama is following this Llama
+     *
+     * @return True if being followed in the caravan
+     */
+    boolean hasCaravanTail();
+
+    /**
+     * Get the Llama that this Llama is following
+     * <p>
+     * Does not necessarily mean the leader of the entire caravan
+     *
+     * @return The Llama being followed
+     */
+    @Nullable
+    Llama getCaravanHead();
+
+    /**
+     * Get the Llama following this Llama, if any
+     *
+     * @return The Llama following this one
+     */
+    @Nullable
+    Llama getCaravanTail();
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
index 7d4ce660..4205dc57 100644
--- a/src/main/java/org/bukkit/entity/Mob.java
+++ b/src/main/java/org/bukkit/entity/Mob.java
@@ -146,4 +146,20 @@ public interface Mob extends LivingEntity, Lootable {
      * @return whether the mob is aware
      */
     public boolean isAware();
+
+    // Purpur start
+    /**
+     * Check if Mob is left-handed
+     *
+     * @return True if left-handed
+     */
+    public boolean isLeftHanded();
+
+    /**
+     * Set if Mob is left-handed
+     *
+     * @param leftHanded True if left-handed
+     */
+    public void setLeftHanded(boolean leftHanded);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index a6a7429e..e8027e1d 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -37,6 +37,9 @@ public interface Panda extends Animals {
      */
     void setHiddenGene(@NotNull Gene gene);
 
+    /**
+     * Panda gene type
+     */
     public enum Gene {
 
         NORMAL(false),
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 5e8814cc..07f188af 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -75,7 +75,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return the friendly name
      * @deprecated in favour of {@link #displayName()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     public String getDisplayName();
 
@@ -89,7 +89,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param name The new display name.
      * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setDisplayName(@Nullable String name);
 
     // Paper start
@@ -130,7 +130,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #playerListName()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getPlayerListName();
 
     /**
@@ -141,7 +141,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param name new player list name
      * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setPlayerListName(@Nullable String name);
 
     /**
@@ -150,7 +150,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return player list header or null
      * @deprecated in favour of {@link #playerListHeader()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @Nullable
     public String getPlayerListHeader();
 
@@ -160,7 +160,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return player list header or null
      * @deprecated in favour of {@link #playerListFooter()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @Nullable
     public String getPlayerListFooter();
 
@@ -170,7 +170,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param header player list header, null for empty
      * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setPlayerListHeader(@Nullable String header);
 
     /**
@@ -179,7 +179,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param footer player list footer, null for empty
      * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setPlayerListFooter(@Nullable String footer);
 
     /**
@@ -190,7 +190,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param footer player list footer, null for empty
      * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);
 
     /**
@@ -230,7 +230,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param message kick message
      * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void kickPlayer(@Nullable String message);
 
     // Paper start
@@ -625,7 +625,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;
 
 
@@ -647,7 +647,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;
 
     /**
@@ -1796,7 +1796,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #locale()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getLocale();
 
     // Paper start
@@ -1818,23 +1818,63 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Gets the view distance for this player
      *
      * @return the player's view distance
-     * @deprecated This is unimplemented and <i>will</i> throw an exception at runtime. The {@link org.bukkit.World World}-based methods still work.
+     * // Tuinity - implemented
      * @see org.bukkit.World#getViewDistance()
      * @see org.bukkit.World#getNoTickViewDistance()
      */
-    @Deprecated
+    //@Deprecated // Tuinity - implemented
     public int getViewDistance();
 
     /**
      * Sets the view distance for this player
      *
      * @param viewDistance the player's view distance
-     * @deprecated This is unimplemented and <i>will</i> throw an exception at runtime. The {@link org.bukkit.World World}-based methods still work.
+     * // Tuinity - implemented
      * @see org.bukkit.World#setViewDistance(int)
      * @see org.bukkit.World#setNoTickViewDistance(int)
      */
-    @Deprecated
+    //@Deprecated // Tuinity - implemented
     public void setViewDistance(int viewDistance);
+
+    // Tuinity start - add view distances api
+    /**
+     * Gets the no-ticking view distance for this player.
+     * <p>
+     * No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not
+     * be set to tick.
+     * </p>
+     * @return The no-tick view distance for this player.
+     */
+    public int getNoTickViewDistance();
+
+    /**
+     * Sets the no-ticking view distance for this player.
+     * <p>
+     * No-tick view distance is the view distance where chunks will load, however the chunks and their entities will not
+     * be set to tick.
+     * </p>
+     * @param viewDistance view distance in [2, 32] or -1
+     */
+    public void setNoTickViewDistance(int viewDistance);
+
+    /**
+     * Gets the sending view distance for this player.
+     * <p>
+     * Sending view distance is the view distance where chunks will load in for players.
+     * </p>
+     * @return The sending view distance for this player.
+     */
+    public int getSendViewDistance();
+
+    /**
+     * Sets the sending view distance for this player.
+     * <p>
+     * Sending view distance is the view distance where chunks will load in for players.
+     * </p>
+     * @param viewDistance view distance in [2, 32] or -1
+     */
+    public void setSendViewDistance(int viewDistance);
+    // Tuinity end - add view distances api
     // Paper end
 
     /**
@@ -2012,6 +2052,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     void resetCooldown();
 
     /**
+     * @param <T> ClientOption type
+     * @param option ClientOption
      * @return the client option value of the player
      */
     @NotNull
@@ -2051,6 +2093,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     // Paper end
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot extends Entity.Spigot {
 
         /**
@@ -2190,4 +2235,60 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     @Override
     Spigot spigot();
     // Spigot end
+
+    // Purpur start
+    /**
+     * Check if player is AFK
+     *
+     * @return True if AFK
+     */
+    boolean isAfk();
+
+    /**
+     * Set player as AFK
+     *
+     * @param setAfk Whether to set AFK or not
+     */
+    void setAfk(boolean setAfk);
+
+    /**
+     * Reset the idle timer back to 0
+     */
+    void resetIdleTimer();
+
+    /**
+     * Check if player is invulnerable from recently spawning or accepting a resource pack
+     *
+     * @return True if invulnerable
+     */
+    boolean isSpawnInvulnerable();
+
+    /**
+     * Get invulnerable ticks remaining
+     *
+     * @return Invulnerable ticks
+     */
+    int getSpawnInvulnerableTicks();
+
+    /**
+     * Set invulnerable ticks remaining
+     *
+     * @param invulnerableTicks Invulnerable ticks remaining
+     */
+    void setSpawnInvulnerableTicks(int invulnerableTicks);
+
+    /**
+     * Allows you to enable fall damage while {@link #getAllowFlight()} is {@code true}
+     *
+     * @param flyingFallDamage Enables fall damage when {@link #getAllowFlight()} is true
+     */
+    public void setFlyingFallDamage(boolean flyingFallDamage);
+
+    /**
+     * Allows you get if fall damage is enabled while {@link #getAllowFlight()} is {@code true}
+     *
+     * @return True if fall damage is enabled when {@link #getAllowFlight()} is true
+     */
+    public boolean hasFlyingFallDamage();
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Rabbit.java b/src/main/java/org/bukkit/entity/Rabbit.java
index e8815428..24c81708 100644
--- a/src/main/java/org/bukkit/entity/Rabbit.java
+++ b/src/main/java/org/bukkit/entity/Rabbit.java
@@ -2,6 +2,9 @@ package org.bukkit.entity;
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a rabbit
+ */
 public interface Rabbit extends Animals {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Raider.java b/src/main/java/org/bukkit/entity/Raider.java
index 9a99b8ca..f1763f75 100644
--- a/src/main/java/org/bukkit/entity/Raider.java
+++ b/src/main/java/org/bukkit/entity/Raider.java
@@ -3,6 +3,9 @@ package org.bukkit.entity;
 import org.bukkit.block.Block;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents a raider entity
+ */
 public interface Raider extends Monster {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Shulker.java b/src/main/java/org/bukkit/entity/Shulker.java
index 010e1f9c..bd40fdfb 100644
--- a/src/main/java/org/bukkit/entity/Shulker.java
+++ b/src/main/java/org/bukkit/entity/Shulker.java
@@ -4,6 +4,9 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.material.Colorable;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a shulker
+ */
 public interface Shulker extends Golem, Colorable {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ShulkerBullet.java b/src/main/java/org/bukkit/entity/ShulkerBullet.java
index 4623e0d7..ca3f98a8 100644
--- a/src/main/java/org/bukkit/entity/ShulkerBullet.java
+++ b/src/main/java/org/bukkit/entity/ShulkerBullet.java
@@ -2,6 +2,9 @@ package org.bukkit.entity;
 
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents a shulker bullet
+ */
 public interface ShulkerBullet extends Projectile {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Snowman.java b/src/main/java/org/bukkit/entity/Snowman.java
index 10f8f6d4..34f9d1b5 100644
--- a/src/main/java/org/bukkit/entity/Snowman.java
+++ b/src/main/java/org/bukkit/entity/Snowman.java
@@ -23,4 +23,20 @@ public interface Snowman extends Golem, RangedEntity { // Paper
      * @param derpMode True to remove the pumpkin, false to add a pumpkin
      */
     void setDerp(boolean derpMode);
+
+    // Purpur start
+    /**
+     * Get the player that summoned this snowman
+     *
+     * @return UUID of summoner
+     */
+    @org.jetbrains.annotations.Nullable java.util.UUID getSummoner();
+
+    /**
+     * Set the player that summoned this snowman
+     *
+     * @param summoner UUID of summoner
+     */
+    void setSummoner(@org.jetbrains.annotations.Nullable java.util.UUID summoner);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Tameable.java b/src/main/java/org/bukkit/entity/Tameable.java
index 65e68da9..cb708ae6 100644
--- a/src/main/java/org/bukkit/entity/Tameable.java
+++ b/src/main/java/org/bukkit/entity/Tameable.java
@@ -3,6 +3,9 @@ package org.bukkit.entity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents a tameable entity
+ */
 public interface Tameable extends Animals {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ThrowableProjectile.java b/src/main/java/org/bukkit/entity/ThrowableProjectile.java
index ceb3e2c5..fab5c3c9 100644
--- a/src/main/java/org/bukkit/entity/ThrowableProjectile.java
+++ b/src/main/java/org/bukkit/entity/ThrowableProjectile.java
@@ -3,6 +3,9 @@ package org.bukkit.entity;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a throwable projectile
+ */
 public interface ThrowableProjectile extends Projectile {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index 511b9684..0e2615b6 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -113,6 +113,13 @@ public interface Villager extends AbstractVillager {
      */
     public void wakeup();
 
+    // Purpur start
+    /**
+     * Reset this villager's trade offers
+     */
+    public void resetOffers();
+    // Purpur end
+
     /**
      * Causes this villager to shake his head.
      */
diff --git a/src/main/java/org/bukkit/entity/Wither.java b/src/main/java/org/bukkit/entity/Wither.java
index 8c95cd69..86907637 100644
--- a/src/main/java/org/bukkit/entity/Wither.java
+++ b/src/main/java/org/bukkit/entity/Wither.java
@@ -36,4 +36,20 @@ public interface Wither extends Monster, Boss, RangedEntity { // Paper
      */
     void setCanTravelThroughPortals(boolean value);
     // Paper end
+
+    // Purpur start
+    /**
+     * Get the player that summoned this wither
+     *
+     * @return UUID of summoner
+     */
+    @org.jetbrains.annotations.Nullable java.util.UUID getSummoner();
+
+    /**
+     * Set the player that summoned this wither
+     *
+     * @param summoner UUID of summoner
+     */
+    void setSummoner(@org.jetbrains.annotations.Nullable java.util.UUID summoner);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/Wolf.java b/src/main/java/org/bukkit/entity/Wolf.java
index 0e5decad..c1fd30fe 100644
--- a/src/main/java/org/bukkit/entity/Wolf.java
+++ b/src/main/java/org/bukkit/entity/Wolf.java
@@ -39,4 +39,20 @@ public interface Wolf extends Tameable, Sittable {
      * @param color the color to apply
      */
     public void setCollarColor(@NotNull DyeColor color);
+
+    // Purpur start
+    /**
+     * Checks if this wolf is rabid
+     *
+     * @return whether the wolf is rabid
+     */
+    public boolean isRabid();
+
+    /**
+     * Sets this wolf to be rabid or not
+     *
+     * @param rabid whether the wolf should be rabid
+     */
+    public void setRabid(boolean rabid);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
index 91cab8b1..bd5b3142 100644
--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
@@ -4,6 +4,9 @@ import org.bukkit.entity.Minecart;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents a minecart with command block
+ */
 public interface CommandMinecart extends Minecart {
 
     /**
@@ -34,7 +37,7 @@ public interface CommandMinecart extends Minecart {
      * @param name New name for this CommandMinecart.
      * @deprecated in favour of {@link #customName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setName(@Nullable String name);
 
 }
diff --git a/src/main/java/org/bukkit/event/Cancellable.java b/src/main/java/org/bukkit/event/Cancellable.java
index 799b0b0f..7f02db9d 100644
--- a/src/main/java/org/bukkit/event/Cancellable.java
+++ b/src/main/java/org/bukkit/event/Cancellable.java
@@ -1,5 +1,8 @@
 package org.bukkit.event;
 
+/**
+ * Represents a cancellable event
+ */
 public interface Cancellable {
 
     /**
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 8ec56cd6..740bbce5 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -95,6 +95,9 @@ public abstract class Event {
         return async;
     }
 
+    /**
+     * Event result
+     */
     public enum Result {
 
         /**
diff --git a/src/main/java/org/bukkit/event/EventException.java b/src/main/java/org/bukkit/event/EventException.java
index 84638e85..a32f7d86 100644
--- a/src/main/java/org/bukkit/event/EventException.java
+++ b/src/main/java/org/bukkit/event/EventException.java
@@ -1,5 +1,8 @@
 package org.bukkit.event;
 
+/**
+ * Event exception
+ */
 public class EventException extends Exception {
     private static final long serialVersionUID = 3532808232324183999L;
     private final Throwable cause;
diff --git a/src/main/java/org/bukkit/event/block/Action.java b/src/main/java/org/bukkit/event/block/Action.java
index 25d26e3f..2825263c 100644
--- a/src/main/java/org/bukkit/event/block/Action.java
+++ b/src/main/java/org/bukkit/event/block/Action.java
@@ -1,5 +1,8 @@
 package org.bukkit.event.block;
 
+/**
+ * Block action
+ */
 public enum Action {
 
     /**
diff --git a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
index 891f3d25..5cc86332 100644
--- a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
@@ -12,6 +12,9 @@ import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Called when a cauldron changes fluid level
+ */
 public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
@@ -119,6 +122,9 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
         return handlers;
     }
 
+    /**
+     * Cauldron level change reason
+     */
     public enum ChangeReason {
         /**
          * Player emptying the cauldron by filling their bucket.
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 1f79f704..00410691 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -90,7 +90,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @deprecated in favour of {@link #lines()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String[] getLines() {
         return adventure$lines.stream().map(org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer()::serialize).toArray(String[]::new); // Paper
     }
@@ -106,7 +106,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @deprecated in favour of {@link #line(int)}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getLine(int index) throws IndexOutOfBoundsException {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.adventure$lines.get(index)); // Paper
     }
@@ -120,7 +120,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      *     or < 0}
      * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {
         adventure$lines.set(index, line != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(line) : null); // Paper
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 869bad74..05fde759 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -10,15 +10,28 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityDamageByEntityEvent extends EntityDamageEvent {
     private final Entity damager;
+    private final boolean isCritical; // Purpur
 
     public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
+        // Purpur start
+        this(damager, damagee, cause, damage, false);
+    }
+    public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage, boolean isCritical) {
+        // Purpur end
         super(damagee, cause, damage);
         this.damager = damager;
+        this.isCritical = isCritical; // Purpur
     }
 
     public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        // Purpur start
+        this(damager, damagee, cause, modifiers, modifierFunctions, false);
+    }
+    public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, boolean isCritical) {
+        // Purpur end
         super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
+        this.isCritical = isCritical; // Purpur
     }
 
     /**
@@ -30,4 +43,16 @@ public class EntityDamageByEntityEvent extends EntityDamageEvent {
     public Entity getDamager() {
         return damager;
     }
+
+    // Purpur start
+
+    /**
+     * Whether this damage was done by a critical hit
+     *
+     * @return True if critical hit
+     */
+    public boolean isCritical() {
+        return this.isCritical;
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
index b915c3ca..476b33dd 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
@@ -217,6 +217,12 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
          * When all effects are removed due to a bucket of milk.
          */
         MILK,
+        // Purpur start
+        /**
+         * When a player wears full netherite armor
+         */
+        NETHERITE_ARMOR,
+        // Purpur end
         /**
          * When a player gets bad omen after killing a patrol captain.
          */
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
index 1e702f94..4cbf2dca 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
@@ -79,6 +79,9 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
         return handlers;
     }
 
+    /**
+     * Entity transform reason
+     */
     public enum TransformReason {
         /**
          * When a zombie gets cured and a villager is spawned.
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index e0e06879..9fa0ba2f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -66,6 +66,9 @@ public class EntityUnleashEvent extends EntityEvent {
         return handlers;
     }
 
+    /**
+     * Entity unleash reason
+     */
     public enum UnleashReason {
         /**
          * When the entity's leashholder has died or logged out, and so is
diff --git a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
index e378cc29..f5b9fd0b 100644
--- a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
@@ -5,6 +5,9 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called when an item merges with another
+ */
 public class ItemMergeEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index 3d45d2e4..3cecfe9f 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -151,7 +151,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @param deathMessage Message to appear to other players on the server.
      * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setDeathMessage(@Nullable String deathMessage) {
         this.deathMessage = deathMessage;
         this.adventure$deathMessage = deathMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper
@@ -164,7 +164,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @deprecated in favour of {@link #deathMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getDeathMessage() {
         return this.deathMessage != null ? this.deathMessage : (this.adventure$deathMessage != null ? getDeathMessageString(this.adventure$deathMessage) : null); // Paper
     }
diff --git a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
index b550029c..d070baf9 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
@@ -6,6 +6,9 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Called when a villager changes career
+ */
 public class VillagerCareerChangeEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
index 21ad8888..295cbe55 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
@@ -18,6 +18,9 @@ public class InventoryCloseEvent extends InventoryEvent {
         return reason;
     }
 
+    /**
+     * Inventory close reason
+     */
     public enum Reason {
         /**
          * Unknown reason
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index e1e7f45f..e10ff4ab 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -136,7 +136,7 @@ public enum InventoryType {
     COMPOSTER(1, "Composter")
     ;
 
-    private final int size;
+    private int size; // Purpur - remove final
     private final String title;
     private final boolean isCreatable;
 
@@ -163,12 +163,18 @@ public enum InventoryType {
         this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure
     }
 
+    // Purpur start
+    public void setDefaultSize(int size) {
+        this.size = size;
+    }
+    // Purpur end
+
     public int getDefaultSize() {
         return size;
     }
 
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getDefaultTitle() {
         return title;
     }
@@ -183,6 +189,9 @@ public enum InventoryType {
         return isCreatable;
     }
 
+    /**
+     * Inventory slot type
+     */
     public enum SlotType {
         /**
          * A result slot in a furnace or crafting inventory.
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
index efd29d19..b5de6e77 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
@@ -7,6 +7,9 @@ import org.bukkit.inventory.Recipe;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Prepare item craft event
+ */
 public class PrepareItemCraftEvent extends InventoryEvent {
     private static final HandlerList handlers = new HandlerList();
     private boolean repair;
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 694a8176..2d5066a0 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -179,7 +179,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @deprecated in favour of {@link #kickMessage()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getKickMessage() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.message); // Paper
     }
@@ -190,7 +190,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @param message New kick message
      * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setKickMessage(@NotNull final String message) {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
@@ -210,7 +210,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @param message Kick message to display to the user
      * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void disallow(@NotNull final Result result, @NotNull final String message) {
         this.result = result;
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index 851a189d..7057c2e9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -17,7 +17,7 @@ public class PlayerJoinEvent extends PlayerEvent {
         this.joinMessage = joinMessage;
     }
 
-    @Deprecated // Paper end
+    @Deprecated // Paper end // Purpur - conflict on change
     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {
         super(playerJoined);
         this.joinMessage = joinMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(joinMessage) : null; // Paper end
@@ -50,7 +50,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @deprecated in favour of {@link #joinMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getJoinMessage() {
         return this.joinMessage == null ? null : org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.joinMessage); // Paper
     }
@@ -61,7 +61,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @param joinMessage join message. If null, no message will be sent
      * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setJoinMessage(@Nullable String joinMessage) {
         this.joinMessage = joinMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(joinMessage) : null; // Paper
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 05ecfd8c..e5702076 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -85,7 +85,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #reason()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getReason() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.kickReason); // Paper
     }
@@ -97,7 +97,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #leaveMessage()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getLeaveMessage() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.leaveMessage); // Paper
     }
@@ -118,7 +118,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @param kickReason kick reason
      * @deprecated in favour of {@link #reason(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setReason(@NotNull String kickReason) {
         this.kickReason = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickReason); // Paper
     }
@@ -129,7 +129,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @param leaveMessage leave message
      * @deprecated in favour of {@link #leaveMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setLeaveMessage(@NotNull String leaveMessage) {
         this.leaveMessage = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(leaveMessage); // Paper
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
index ebd499c1..61895d8d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
@@ -36,7 +36,7 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
      * @deprecated in favour of {@link #locale()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getLocale() {
         return locale;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 75cc5473..712900c9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -139,7 +139,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @deprecated in favour of {@link #kickMessage()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getKickMessage() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.message); // Paper
     }
@@ -150,7 +150,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message New kick message
      * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setKickMessage(@NotNull final String message) {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
@@ -181,7 +181,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message Kick message to display to the user
      * @deprecated in favour of {@link #disallow(Result, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper start
+    @Deprecated // Paper start // Purpur - conflict on change
     public void disallow(@NotNull final Result result, @NotNull final String message) {
         this.result = result;
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message);
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index 123979ed..5b855799 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -95,7 +95,7 @@ public class PlayerPreLoginEvent extends Event {
      * @return Current kick message
      * @deprecated in favour of {@link #kickMessage()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     public String getKickMessage() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.message); // Paper
@@ -107,7 +107,7 @@ public class PlayerPreLoginEvent extends Event {
      * @param message New kick message
      * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setKickMessage(@NotNull final String message) {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
@@ -127,7 +127,7 @@ public class PlayerPreLoginEvent extends Event {
      * @param message Kick message to display to the user
      * @deprecated in favour of {@link #disallow(org.bukkit.event.player.PlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void disallow(@NotNull final Result result, @NotNull final String message) {
         this.result = result;
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index b6016aa1..1826d11d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -61,7 +61,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @deprecated in favour of {@link #quitMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getQuitMessage() {
         return this.quitMessage == null ? null : org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.quitMessage); // Paper
     }
@@ -72,7 +72,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @param quitMessage quit message
      * @deprecated in favour of {@link #quitMessage(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setQuitMessage(@Nullable String quitMessage) {
         this.quitMessage = quitMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(quitMessage) : null; // Paper
     }
@@ -94,6 +94,9 @@ public class PlayerQuitEvent extends PlayerEvent {
         return this.reason;
     }
 
+    /**
+     * Player quit reason
+     */
     public enum QuitReason {
         /**
          * The player left on their own behalf.
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index 553d7740..4a2d6191 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -33,6 +33,9 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
         return cause;
     }
 
+    /**
+     * Player teleport cause
+     */
     public enum TeleportCause {
         /**
          * Indicates the teleporation was caused by a player throwing an Ender
diff --git a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
index 9e852ac9..55db1a07 100644
--- a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
@@ -40,6 +40,9 @@ public class RaidStopEvent extends RaidEvent {
         return handlers;
     }
 
+    /**
+     * Raid stop reason
+     */
     public enum Reason {
 
         /**
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
index 4f8c8522..c18d6d97 100644
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
@@ -73,7 +73,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      * @deprecated in favour of {@link #message()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getMessage() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.message); // Paper
     }
@@ -84,7 +84,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      * @param message New message to broadcast
      * @deprecated in favour of {@link #message(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setMessage(@NotNull String message) {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index ede5a41b..6c6501d7 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -109,7 +109,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @deprecated in favour of {@link #motd()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getMotd() {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.motd); // Paper
     }
@@ -120,7 +120,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @param motd the message of the day
      * @deprecated in favour of {@link #motd(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setMotd(@NotNull String motd) {
         this.motd = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(motd); // Paper
     }
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index c98f07f8..a03669ed 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -67,6 +67,9 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
         return handlers;
     }
 
+    /**
+     * Lightning strike cause
+     */
     public enum Cause {
         /**
          * Triggered by the /summon command.
diff --git a/src/main/java/org/bukkit/event/world/WorldEvent.java b/src/main/java/org/bukkit/event/world/WorldEvent.java
index cffeff33..1fa083d5 100644
--- a/src/main/java/org/bukkit/event/world/WorldEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldEvent.java
@@ -10,6 +10,13 @@ import org.jetbrains.annotations.NotNull;
 public abstract class WorldEvent extends Event {
     private final World world;
 
+    // Purpur start
+    public WorldEvent(boolean isAsync, @NotNull final World world) {
+        super(isAsync);
+        this.world = world;
+    }
+    // Purpur end
+
     public WorldEvent(@NotNull final World world) {
         this.world = world;
     }
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
index e1f4930f..00b3b1d6 100644
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java
@@ -31,6 +31,9 @@ public final class HelpTopicComparator implements Comparator<HelpTopic> {
         return tnc.compare(lhs.getName(), rhs.getName());
     }
 
+    /**
+     * Topic name comparator
+     */
     public static final class TopicNameComparator implements Comparator<String> {
         private TopicNameComparator() {}
 
diff --git a/src/main/java/org/bukkit/inventory/AnvilInventory.java b/src/main/java/org/bukkit/inventory/AnvilInventory.java
index b95e563b..435026e5 100644
--- a/src/main/java/org/bukkit/inventory/AnvilInventory.java
+++ b/src/main/java/org/bukkit/inventory/AnvilInventory.java
@@ -109,4 +109,14 @@ public interface AnvilInventory extends Inventory {
         setItem(2, result);
     }
     // Paper end
+
+    // Purpur start
+    boolean canBypassCost();
+
+    void setBypassCost(boolean bypassCost);
+
+    boolean canDoUnsafeEnchants();
+
+    void setDoUnsafeEnchants(boolean canDoUnsafeEnchants);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/inventory/ArmoredHorseInventory.java b/src/main/java/org/bukkit/inventory/ArmoredHorseInventory.java
index 163ffe8f..36145294 100644
--- a/src/main/java/org/bukkit/inventory/ArmoredHorseInventory.java
+++ b/src/main/java/org/bukkit/inventory/ArmoredHorseInventory.java
@@ -2,6 +2,9 @@ package org.bukkit.inventory;
 
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents an armored horse's inventory
+ */
 public interface ArmoredHorseInventory extends AbstractHorseInventory {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/EquipmentSlot.java b/src/main/java/org/bukkit/inventory/EquipmentSlot.java
index 1e7d7711..ad7db440 100644
--- a/src/main/java/org/bukkit/inventory/EquipmentSlot.java
+++ b/src/main/java/org/bukkit/inventory/EquipmentSlot.java
@@ -1,5 +1,8 @@
 package org.bukkit.inventory;
 
+/**
+ * Equipment slot
+ */
 public enum EquipmentSlot {
 
     HAND,
diff --git a/src/main/java/org/bukkit/inventory/InventoryHolder.java b/src/main/java/org/bukkit/inventory/InventoryHolder.java
index c7b17eab..d4e2bcf8 100644
--- a/src/main/java/org/bukkit/inventory/InventoryHolder.java
+++ b/src/main/java/org/bukkit/inventory/InventoryHolder.java
@@ -2,6 +2,9 @@ package org.bukkit.inventory;
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents an inventory holder
+ */
 public interface InventoryHolder {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index b06995aa..5e33fe46 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -464,7 +464,7 @@ public abstract class InventoryView {
      * @return The title.
      * @deprecated in favour of {@link #title()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     public abstract String getTitle();
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
index 0a4466c6..e7dd844f 100644
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java
@@ -148,6 +148,7 @@ public interface ItemFactory {
      * Creates a hover event for the given item.
      *
      * @param item The item
+     * @param op Unary operator
      * @return A hover event
      */
     @NotNull
@@ -188,7 +189,7 @@ public interface ItemFactory {
     /**
      * Creates a {@link net.md_5.bungee.api.chat.hover.content.Content} of that ItemStack for displaying.
      *
-     * @param itemStack
+     * @param itemStack ItemStack to check
      * @return the {@link net.md_5.bungee.api.chat.hover.content.Content} of that ItemStack
      */
     @NotNull
@@ -242,4 +243,15 @@ public interface ItemFactory {
     @Deprecated
     net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(@NotNull org.bukkit.entity.Entity entity, @NotNull net.md_5.bungee.api.chat.BaseComponent[] customName);
     // Paper end
+
+    // Purpur start
+    /**
+     * Get a monster egg ItemStack from an EntityType
+     *
+     * @param type EntityType
+     * @return ItemStack spawner egg
+     */
+    @Nullable
+    ItemStack getMonsterEgg(@Nullable org.bukkit.entity.EntityType type);
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 14cdc643..bbf0f3c1 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -17,6 +17,18 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+// Purpur start
+import com.google.common.collect.Multimap;
+import java.util.Collection;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.inventory.meta.BlockDataMeta;
+import org.bukkit.inventory.meta.Repairable;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataHolder;
+import com.destroystokyo.paper.Namespaced;
+// Purpur end
 
 /**
  * Represents a stack of items.
@@ -922,4 +934,626 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         return Bukkit.getUnsafe().isValidRepairItemStack(toBeRepaired, this);
     }
     // Paper end
+
+    // Purpur start
+    /**
+     * Gets the display name that is set.
+     * <p>
+     * Plugins should check that hasDisplayName() returns <code>true</code>
+     * before calling this method.
+     *
+     * @return the display name that is set
+     */
+    @NotNull
+    public String getDisplayName() {
+        return getItemMeta().getDisplayName();
+    }
+
+    /**
+     * Sets the display name.
+     *
+     * @param name the name to set
+     */
+    public void setDisplayName(@Nullable String name) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setDisplayName(name);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Checks for existence of a display name.
+     *
+     * @return true if this has a display name
+     */
+    public boolean hasDisplayName() {
+        return hasItemMeta() && getItemMeta().hasDisplayName();
+    }
+
+    /**
+     * Gets the localized display name that is set.
+     * <p>
+     * Plugins should check that hasLocalizedName() returns <code>true</code>
+     * before calling this method.
+     *
+     * @return the localized name that is set
+     */
+    @NotNull
+    public String getLocalizedName() {
+        return getItemMeta().getLocalizedName();
+    }
+
+    /**
+     * Sets the localized name.
+     *
+     * @param name the name to set
+     */
+    public void setLocalizedName(@Nullable String name) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setLocalizedName(name);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Checks for existence of a localized name.
+     *
+     * @return true if this has a localized name
+     */
+    public boolean hasLocalizedName() {
+        return hasItemMeta() && getItemMeta().hasLocalizedName();
+    }
+
+    /**
+     * Checks for existence of lore.
+     *
+     * @return true if this has lore
+     */
+    public boolean hasLore() {
+        return hasItemMeta() && getItemMeta().hasLore();
+    }
+
+    /**
+     * Checks for existence of the specified enchantment.
+     *
+     * @param ench enchantment to check
+     * @return true if this enchantment exists for this meta
+     */
+    public boolean hasEnchant(@NotNull Enchantment ench) {
+        return hasItemMeta() && getItemMeta().hasEnchant(ench);
+    }
+
+    /**
+     * Checks for the level of the specified enchantment.
+     *
+     * @param ench enchantment to check
+     * @return The level that the specified enchantment has, or 0 if none
+     */
+    public int getEnchantLevel(@NotNull Enchantment ench) {
+        return getItemMeta().getEnchantLevel(ench);
+    }
+
+    /**
+     * Returns a copy the enchantments in this ItemMeta. <br>
+     * Returns an empty map if none.
+     *
+     * @return An immutable copy of the enchantments
+     */
+    @NotNull
+    public Map<Enchantment, Integer> getEnchants() {
+        return getItemMeta().getEnchants();
+    }
+
+    /**
+     * Adds the specified enchantment to this item meta.
+     *
+     * @param ench Enchantment to add
+     * @param level Level for the enchantment
+     * @param ignoreLevelRestriction this indicates the enchantment should be
+     *     applied, ignoring the level limit
+     * @return true if the item meta changed as a result of this call, false
+     *     otherwise
+     */
+    public boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreLevelRestriction) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.addEnchant(ench, level, ignoreLevelRestriction);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Removes the specified enchantment from this item meta.
+     *
+     * @param ench Enchantment to remove
+     * @return true if the item meta changed as a result of this call, false
+     *     otherwise
+     */
+    public boolean removeEnchant(@NotNull Enchantment ench) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.removeEnchant(ench);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Checks for the existence of any enchantments.
+     *
+     * @return true if an enchantment exists on this meta
+     */
+    public boolean hasEnchants() {
+        return hasItemMeta() && getItemMeta().hasEnchants();
+    }
+
+    /**
+     * Checks if the specified enchantment conflicts with any enchantments in
+     * this ItemMeta.
+     *
+     * @param ench enchantment to test
+     * @return true if the enchantment conflicts, false otherwise
+     */
+    public boolean hasConflictingEnchant(@NotNull Enchantment ench) {
+        return hasItemMeta() && getItemMeta().hasConflictingEnchant(ench);
+    }
+
+    /**
+     * Sets the custom model data.
+     * <p>
+     * CustomModelData is an integer that may be associated client side with a
+     * custom item model.
+     *
+     * @param data the data to set, or null to clear
+     */
+    public void setCustomModelData(@Nullable Integer data) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setCustomModelData(data);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Gets the custom model data that is set.
+     * <p>
+     * CustomModelData is an integer that may be associated client side with a
+     * custom item model.
+     * <p>
+     * Plugins should check that hasCustomModelData() returns <code>true</code>
+     * before calling this method.
+     *
+     * @return the localized name that is set
+     */
+    public int getCustomModelData() {
+        return getItemMeta().getCustomModelData();
+    }
+
+    /**
+     * Checks for existence of custom model data.
+     * <p>
+     * CustomModelData is an integer that may be associated client side with a
+     * custom item model.
+     *
+     * @return true if this has custom model data
+     */
+    public boolean hasCustomModelData() {
+        return hasItemMeta() && getItemMeta().hasCustomModelData();
+    }
+
+    /**
+     * Returns whether the item has block data currently attached to it.
+     *
+     * @return whether block data is already attached
+     */
+    public boolean hasBlockData() {
+        return hasItemMeta() && ((BlockDataMeta) getItemMeta()).hasBlockData();
+    }
+
+    /**
+     * Returns the currently attached block data for this item or creates a new
+     * one if one doesn't exist.
+     *
+     * The state is a copy, it must be set back (or to another item) with
+     * {@link #setBlockData(BlockData)}
+     *
+     * @param material the material we wish to get this data in the context of
+     * @return the attached data or new data
+     */
+    @NotNull
+    public BlockData getBlockData(@NotNull Material material) {
+        return ((BlockDataMeta) getItemMeta()).getBlockData(material);
+    }
+
+    /**
+     * Attaches a copy of the passed block data to the item.
+     *
+     * @param blockData the block data to attach to the block.
+     * @throws IllegalArgumentException if the blockData is null or invalid for
+     * this item.
+     */
+    public void setBlockData(@NotNull BlockData blockData) {
+        ItemMeta itemMeta = getItemMeta();
+        ((BlockDataMeta) itemMeta).setBlockData(blockData);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Gets the repair penalty
+     *
+     * @return the repair penalty
+     */
+    public int getRepairCost() {
+        return ((Repairable) getItemMeta()).getRepairCost();
+    }
+
+    /**
+     * Sets the repair penalty
+     *
+     * @param cost repair penalty
+     */
+    public void setRepairCost(int cost) {
+        ItemMeta itemMeta = getItemMeta();
+        ((Repairable) itemMeta).setRepairCost(cost);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Checks to see if this has a repair penalty
+     *
+     * @return true if this has a repair penalty
+     */
+    public boolean hasRepairCost() {
+        return hasItemMeta() && ((Repairable) getItemMeta()).hasRepairCost();
+    }
+
+    /**
+     * Return if the unbreakable tag is true. An unbreakable item will not lose
+     * durability.
+     *
+     * @return true if the unbreakable tag is true
+     */
+    public boolean isUnbreakable() {
+        return hasItemMeta() && getItemMeta().isUnbreakable();
+    }
+
+    /**
+     * Sets the unbreakable tag. An unbreakable item will not lose durability.
+     *
+     * @param unbreakable true if set unbreakable
+     */
+    public void setUnbreakable(boolean unbreakable) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setUnbreakable(unbreakable);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Checks for the existence of any AttributeModifiers.
+     *
+     * @return true if any AttributeModifiers exist
+     */
+    public boolean hasAttributeModifiers() {
+        return hasItemMeta() && getItemMeta().hasAttributeModifiers();
+    }
+
+    /**
+     * Return an immutable copy of all Attributes and
+     * their modifiers in this ItemMeta.<br>
+     * Returns null if none exist.
+     *
+     * @return an immutable {@link Multimap} of Attributes
+     *         and their AttributeModifiers, or null if none exist
+     */
+    @Nullable
+    public Multimap<Attribute, AttributeModifier> getAttributeModifiers() {
+        return getItemMeta().getAttributeModifiers();
+    }
+
+    /**
+     * Return an immutable copy of all {@link Attribute}s and their
+     * {@link AttributeModifier}s for a given {@link EquipmentSlot}.<br>
+     * Any {@link AttributeModifier} that does have have a given
+     * {@link EquipmentSlot} will be returned. This is because
+     * AttributeModifiers without a slot are active in any slot.<br>
+     * If there are no attributes set for the given slot, an empty map
+     * will be returned.
+     *
+     * @param slot the {@link EquipmentSlot} to check
+     * @return the immutable {@link Multimap} with the
+     *         respective Attributes and modifiers, or an empty map
+     *         if no attributes are set.
+     */
+    @NotNull
+    public Multimap<Attribute, AttributeModifier> getAttributeModifiers(@Nullable EquipmentSlot slot) {
+        return getItemMeta().getAttributeModifiers(slot);
+    }
+
+    /**
+     * Return an immutable copy of all {@link AttributeModifier}s
+     * for a given {@link Attribute}
+     *
+     * @param attribute the {@link Attribute}
+     * @return an immutable collection of {@link AttributeModifier}s
+     *          or null if no AttributeModifiers exist for the Attribute.
+     * @throws NullPointerException if Attribute is null
+     */
+    @Nullable
+    public Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute) {
+        return getItemMeta().getAttributeModifiers(attribute);
+    }
+
+    /**
+     * Add an Attribute and it's Modifier.
+     * AttributeModifiers can now support {@link EquipmentSlot}s.
+     * If not set, the {@link AttributeModifier} will be active in ALL slots.
+     * <br>
+     * Two {@link AttributeModifier}s that have the same {@link java.util.UUID}
+     * cannot exist on the same Attribute.
+     *
+     * @param attribute the {@link Attribute} to modify
+     * @param modifier the {@link AttributeModifier} specifying the modification
+     * @return true if the Attribute and AttributeModifier were
+     *         successfully added
+     * @throws NullPointerException if Attribute is null
+     * @throws NullPointerException if AttributeModifier is null
+     * @throws IllegalArgumentException if AttributeModifier already exists
+     */
+    public boolean addAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.addAttributeModifier(attribute, modifier);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Set all {@link Attribute}s and their {@link AttributeModifier}s.
+     * To clear all currently set Attributes and AttributeModifiers use
+     * null or an empty Multimap.
+     * If not null nor empty, this will filter all entries that are not-null
+     * and add them to the ItemStack.
+     *
+     * @param attributeModifiers the new Multimap containing the Attributes
+     *                           and their AttributeModifiers
+     */
+    public void setAttributeModifiers(@Nullable Multimap<Attribute, AttributeModifier> attributeModifiers) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setAttributeModifiers(attributeModifiers);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Remove all {@link AttributeModifier}s associated with the given
+     * {@link Attribute}.
+     * This will return false if nothing was removed.
+     *
+     * @param attribute attribute to remove
+     * @return  true if all modifiers were removed from a given
+     *                  Attribute. Returns false if no attributes were
+     *                  removed.
+     * @throws NullPointerException if Attribute is null
+     */
+    public boolean removeAttributeModifier(@NotNull Attribute attribute) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.removeAttributeModifier(attribute);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Remove all {@link Attribute}s and {@link AttributeModifier}s for a
+     * given {@link EquipmentSlot}.<br>
+     * If the given {@link EquipmentSlot} is null, this will remove all
+     * {@link AttributeModifier}s that do not have an EquipmentSlot set.
+     *
+     * @param slot the {@link EquipmentSlot} to clear all Attributes and
+     *             their modifiers for
+     * @return true if all modifiers were removed that match the given
+     *         EquipmentSlot.
+     */
+    public boolean removeAttributeModifier(@Nullable EquipmentSlot slot) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.removeAttributeModifier(slot);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Remove a specific {@link Attribute} and {@link AttributeModifier}.
+     * AttributeModifiers are matched according to their {@link java.util.UUID}.
+     *
+     * @param attribute the {@link Attribute} to remove
+     * @param modifier the {@link AttributeModifier} to remove
+     * @return if any attribute modifiers were remove
+     *
+     * @throws NullPointerException if the Attribute is null
+     * @throws NullPointerException if the AttributeModifier is null
+     *
+     * @see AttributeModifier#getUniqueId()
+     */
+    public boolean removeAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        ItemMeta itemMeta = getItemMeta();
+        boolean result = itemMeta.removeAttributeModifier(attribute, modifier);
+        setItemMeta(itemMeta);
+        return result;
+    }
+
+    /**
+     * Returns a custom tag container capable of storing tags on the object.
+     *
+     * Note that the tags stored on this container are all stored under their
+     * own custom namespace therefore modifying default tags using this
+     * {@link PersistentDataHolder} is impossible.
+     *
+     * @return the persistent metadata container
+     */
+    @NotNull
+    public PersistentDataContainer getPersistentDataContainer() {
+        return getItemMeta().getPersistentDataContainer();
+    }
+
+    /**
+     * Checks to see if this item has damage
+     *
+     * @return true if this has damage
+     */
+    public boolean hasDamage() {
+        return hasItemMeta() && ((Damageable) getItemMeta()).hasDamage();
+    }
+
+    /**
+     * Gets the damage
+     *
+     * @return the damage
+     */
+    public int getDamage() {
+        return ((Damageable) getItemMeta()).getDamage();
+    }
+
+    /**
+     * Sets the damage
+     *
+     * @param damage item damage
+     */
+    public void setDamage(int damage) {
+        ItemMeta itemMeta = getItemMeta();
+        ((Damageable) itemMeta).setDamage(damage);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Gets the collection of namespaced keys that the item can destroy in {@link org.bukkit.GameMode#ADVENTURE}
+     *
+     * @return Set of {@link com.destroystokyo.paper.Namespaced}
+     */
+    @NotNull
+    public Set<Namespaced> getDestroyableKeys() {
+        return getItemMeta().getDestroyableKeys();
+    }
+
+    /**
+     * Sets the collection of namespaced keys that the item can destroy in {@link org.bukkit.GameMode#ADVENTURE}
+     *
+     * @param canDestroy Collection of {@link com.destroystokyo.paper.Namespaced}
+     */
+    public void setDestroyableKeys(@NotNull Collection<Namespaced> canDestroy) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setDestroyableKeys(canDestroy);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Gets the collection of namespaced keys that the item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}
+     *
+     * @return Set of {@link com.destroystokyo.paper.Namespaced}
+     */
+    @NotNull
+    public Set<Namespaced> getPlaceableKeys() {
+        return getItemMeta().getPlaceableKeys();
+    }
+
+    /**
+     * Sets the set of namespaced keys that the item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}
+     *
+     * @param canPlaceOn Collection of {@link com.destroystokyo.paper.Namespaced}
+     */
+    @NotNull
+    public void setPlaceableKeys(@NotNull Collection<Namespaced> canPlaceOn) {
+        ItemMeta itemMeta = getItemMeta();
+        itemMeta.setPlaceableKeys(canPlaceOn);
+        setItemMeta(itemMeta);
+    }
+
+    /**
+     * Checks for the existence of any keys that the item can be placed on
+     *
+     * @return true if this item has placeable keys
+     */
+    public boolean hasPlaceableKeys() {
+        return hasItemMeta() && getItemMeta().hasPlaceableKeys();
+    }
+
+    /**
+     * Checks for the existence of any keys that the item can destroy
+     *
+     * @return true if this item has destroyable keys
+     */
+    public boolean hasDestroyableKeys() {
+        return hasItemMeta() && getItemMeta().hasDestroyableKeys();
+    }
+
+    /**
+     * Repairs this item by 1 durability
+     */
+    public void repair() {
+        repair(1);
+    }
+
+    /**
+     * Damages this item by 1 durability
+     *
+     * @return True if damage broke the item
+     */
+    public boolean damage() {
+        return damage(1);
+    }
+
+    /**
+     * Repairs this item's durability by amount
+     *
+     * @param amount Amount of durability to repair
+     */
+    public void repair(int amount) {
+        damage(-amount);
+    }
+
+    /**
+     * Damages this item's durability by amount
+     *
+     * @param amount Amount of durability to damage
+     * @return True if damage broke the item
+     */
+    public boolean damage(int amount) {
+        return damage(amount, false);
+    }
+
+    /**
+     * Damages this item's durability by amount
+     *
+     * @param amount Amount of durability to damage
+     * @param ignoreUnbreaking Ignores unbreaking enchantment
+     * @return True if damage broke the item
+     */
+    public boolean damage(int amount, boolean ignoreUnbreaking) {
+        Damageable damageable = (Damageable) getItemMeta();
+        if (amount > 0) {
+            int unbreaking = getEnchantLevel(Enchantment.DURABILITY);
+            int reduce = 0;
+            for (int i = 0; unbreaking > 0 && i < amount; ++i) {
+                if (reduceDamage(java.util.concurrent.ThreadLocalRandom.current(), unbreaking)) {
+                    ++reduce;
+                }
+            }
+            amount -= reduce;
+            if (amount <= 0) {
+                return isBroke(damageable.getDamage());
+            }
+        }
+        int damage = damageable.getDamage() + amount;
+        damageable.setDamage(damage);
+        setItemMeta((ItemMeta) damageable);
+        return isBroke(damage);
+    }
+
+    public boolean isBroke(int damage) {
+        if (damage > getType().getMaxDurability()) {
+            if (getAmount() > 0) {
+                // ensure it "breaks"
+                setAmount(0);
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean reduceDamage(java.util.Random random, int unbreaking) {
+        if (getType().isArmor()) {
+            return random.nextFloat() < 0.6F;
+        }
+        return random.nextInt(unbreaking + 1) > 0;
+    }
+    // Purpur end
 }
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 90208bc9..c59d5e4e 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -10,6 +10,7 @@ import java.util.function.Predicate;
 import org.bukkit.Material;
 import org.bukkit.Tag;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable; // Purpur
 
 /**
  * Represents a potential item match within a recipe. All choices within a
@@ -152,6 +153,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
     public static class ExactChoice implements RecipeChoice {
 
         private List<ItemStack> choices;
+        private Predicate<ItemStack> predicate; // Purpur
 
         public ExactChoice(@NotNull ItemStack stack) {
             this(Arrays.asList(stack));
@@ -196,6 +198,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
         @Override
         public boolean test(@NotNull ItemStack t) {
+            if (predicate != null) return predicate.test(t); // Purpur
             for (ItemStack match : choices) {
                 if (t.isSimilar(match)) {
                     return true;
@@ -205,6 +208,17 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
             return false;
         }
 
+        // Purpur start
+        @Nullable
+        public Predicate<ItemStack> getPredicate() {
+            return predicate;
+        }
+
+        public void setPredicate(@Nullable Predicate<ItemStack> predicate) {
+            this.predicate = predicate;
+        }
+        // Purpur end
+
         @Override
         public int hashCode() {
             int hash = 7;
diff --git a/src/main/java/org/bukkit/inventory/SaddledHorseInventory.java b/src/main/java/org/bukkit/inventory/SaddledHorseInventory.java
index 7944f26a..8e7bb66c 100644
--- a/src/main/java/org/bukkit/inventory/SaddledHorseInventory.java
+++ b/src/main/java/org/bukkit/inventory/SaddledHorseInventory.java
@@ -1,3 +1,6 @@
 package org.bukkit.inventory;
 
+/**
+ * Represents a saddled horse's inventory
+ */
 public interface SaddledHorseInventory extends AbstractHorseInventory {}
diff --git a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
index 4739d2ec..45ebb3ca 100644
--- a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
@@ -6,6 +6,9 @@ import org.bukkit.block.banner.Pattern;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents metadata on a banner
+ */
 public interface BannerMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/BlockDataMeta.java b/src/main/java/org/bukkit/inventory/meta/BlockDataMeta.java
index 473c72dc..a73b59f4 100644
--- a/src/main/java/org/bukkit/inventory/meta/BlockDataMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BlockDataMeta.java
@@ -4,6 +4,9 @@ import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents metadata on a block
+ */
 public interface BlockDataMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/BlockStateMeta.java b/src/main/java/org/bukkit/inventory/meta/BlockStateMeta.java
index e7d905b1..1fab68c9 100644
--- a/src/main/java/org/bukkit/inventory/meta/BlockStateMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BlockStateMeta.java
@@ -4,6 +4,9 @@ package org.bukkit.inventory.meta;
 import org.bukkit.block.BlockState;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents metadata on a blockstate
+ */
 public interface BlockStateMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 4947251f..6ec72885 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -244,7 +244,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @deprecated in favour of {@link #page(int)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getPage(int page);
 
     /**
@@ -260,7 +260,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @param data the data to set for that page
      * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setPage(int page, @NotNull String data);
 
     /**
@@ -270,7 +270,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @deprecated in favour of {@link #pages()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     List<String> getPages();
 
     /**
@@ -280,7 +280,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @param pages A list of pages to set the book to use
      * @deprecated in favour of {@link #pages(List)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setPages(@NotNull List<String> pages);
 
     /**
@@ -290,7 +290,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @param pages A list of strings, each being a page
      * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setPages(@NotNull String... pages);
 
     /**
@@ -300,7 +300,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
      * @param pages A list of strings, each being a page
      * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void addPage(@NotNull String... pages);
 
     /**
@@ -315,6 +315,9 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
     BookMeta clone();
 
     // Spigot start
+    /**
+     * Spigot stuffs
+     */
     public class Spigot {
 
         /**
diff --git a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
index 35c6594f..47975b24 100644
--- a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
@@ -5,6 +5,9 @@ import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Represents metadata on a crossbow
+ */
 public interface CrossbowMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index f093f991..49d8b1bd 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -59,7 +59,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * @return the display name that is set
      * @deprecated in favour of {@link #displayName()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @NotNull
     String getDisplayName();
 
@@ -83,7 +83,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * @param name the name to set
      * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setDisplayName(@Nullable String name);
 
     // Paper start
@@ -155,7 +155,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * @return a list of lore that is set
      * @deprecated in favour of {@link #lore()}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     @Nullable
     List<String> getLore();
 
@@ -179,7 +179,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * @param lore the lore that will be set
      * @deprecated in favour of {@link #lore(List)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setLore(@Nullable List<String> lore);
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
index 736c60c7..88c7b311 100644
--- a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
@@ -4,6 +4,9 @@ import java.util.List;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents metadata on a knowledge book
+ */
 public interface KnowledgeBookMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index ed0bc202..f6e831f8 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -259,7 +259,7 @@ public final class MapCursor {
      * @deprecated in favour of {@link #caption()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public String getCaption() {
         return this.caption == null ? null : org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.caption); // Paper
     }
@@ -270,7 +270,7 @@ public final class MapCursor {
      * @param caption new caption
      * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     public void setCaption(@Nullable String caption) {
         this.caption = caption == null ? null : org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(caption); // Paper
     }
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index b1b1c729..222c2ae2 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -12,6 +12,9 @@ import org.bukkit.block.BlockFace;
 @Deprecated
 public class CocoaPlant extends MaterialData implements Directional, Attachable {
 
+    /**
+     * Cocoa plant size
+     */
     public enum CocoaPlantSize {
         SMALL,
         MEDIUM,
diff --git a/src/main/java/org/bukkit/material/Directional.java b/src/main/java/org/bukkit/material/Directional.java
index 8c1c7b0a..f188563d 100644
--- a/src/main/java/org/bukkit/material/Directional.java
+++ b/src/main/java/org/bukkit/material/Directional.java
@@ -3,6 +3,9 @@ package org.bukkit.material;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents something that can face a direction
+ */
 public interface Directional {
 
     /**
diff --git a/src/main/java/org/bukkit/material/Openable.java b/src/main/java/org/bukkit/material/Openable.java
index 0ae54f97..6541bca9 100644
--- a/src/main/java/org/bukkit/material/Openable.java
+++ b/src/main/java/org/bukkit/material/Openable.java
@@ -1,5 +1,8 @@
 package org.bukkit.material;
 
+/**
+ * Represents something that can be opened
+ */
 public interface Openable {
 
     /**
diff --git a/src/main/java/org/bukkit/material/PressureSensor.java b/src/main/java/org/bukkit/material/PressureSensor.java
index de20bd39..aa14be49 100644
--- a/src/main/java/org/bukkit/material/PressureSensor.java
+++ b/src/main/java/org/bukkit/material/PressureSensor.java
@@ -1,5 +1,8 @@
 package org.bukkit.material;
 
+/**
+ * Represents a pressure sensor
+ */
 public interface PressureSensor {
     public boolean isPressed();
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStore.java b/src/main/java/org/bukkit/metadata/MetadataStore.java
index 29f86fa9..8fca9192 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStore.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStore.java
@@ -4,6 +4,11 @@ import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Metadata store
+ *
+ * @param <T> Type
+ */
 public interface MetadataStore<T> {
     /**
      * Adds a metadata value to an object.
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index abbe545a..81024450 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -12,6 +12,11 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Metadata store base
+ *
+ * @param <T> Type
+ */
 public abstract class MetadataStoreBase<T> {
     private Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<String, Map<Plugin, MetadataValue>>(); // Paper
 
diff --git a/src/main/java/org/bukkit/metadata/MetadataValue.java b/src/main/java/org/bukkit/metadata/MetadataValue.java
index 4b4d5792..9df3d1c7 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValue.java
@@ -4,6 +4,9 @@ import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+/**
+ * Metadata value
+ */
 public interface MetadataValue {
 
     /**
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index c94e4cdb..0c154e74 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -172,7 +172,7 @@ public class PermissibleBase implements Permissible {
 
         for (Permission perm : defaults) {
             String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
-            permissions.put(name, new PermissionAttachmentInfo(parent, name, null, true));
+            permissions.put(name, new PermissionAttachmentInfo(parent, name, null, perm.getDefault().getValue(isOp()))); // Purpur
             Bukkit.getServer().getPluginManager().subscribeToPermission(name, parent);
             calculateChildPermissions(perm.getChildren(), false, null);
         }
@@ -200,7 +200,7 @@ public class PermissibleBase implements Permissible {
             String name = entry.getKey();
 
             Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
-            boolean value = entry.getValue() ^ invert;
+            boolean value = (entry.getValue() == null && perm != null ? perm.getDefault().getValue(isOp()) : entry.getValue()) ^ invert; // Purpur
             String lname = name.toLowerCase(java.util.Locale.ENGLISH);
 
             permissions.put(lname, new PermissionAttachmentInfo(parent, lname, attachment, value));
diff --git a/src/main/java/org/bukkit/plugin/AuthorNagException.java b/src/main/java/org/bukkit/plugin/AuthorNagException.java
index 6565a441..20985f02 100644
--- a/src/main/java/org/bukkit/plugin/AuthorNagException.java
+++ b/src/main/java/org/bukkit/plugin/AuthorNagException.java
@@ -1,5 +1,8 @@
 package org.bukkit.plugin;
 
+/**
+ * Author nag exception
+ */
 @SuppressWarnings("serial")
 public class AuthorNagException extends RuntimeException {
     private final String message;
diff --git a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
index 21a3d767..6d7a2955 100644
--- a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
@@ -3,6 +3,9 @@ package org.bukkit.projectiles;
 import org.bukkit.block.Block;
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Represents a block projectile source
+ */
 public interface BlockProjectileSource extends ProjectileSource {
 
     /**
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
index 6279957b..24019ed4 100644
--- a/src/main/java/org/bukkit/scoreboard/Objective.java
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java
@@ -47,7 +47,7 @@ public interface Objective {
      * @deprecated in favour of {@link #displayName()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getDisplayName() throws IllegalStateException;
 
     /**
@@ -60,7 +60,7 @@ public interface Objective {
      *     characters.
      * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;
 
     /**
diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
index 93089ce6..ea048006 100644
--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java
+++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
@@ -89,7 +89,7 @@ public interface Scoreboard {
      * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;
 
     /**
@@ -113,7 +113,7 @@ public interface Scoreboard {
      * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;
 
     /**
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index 30fce0df..12789cd0 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -110,7 +110,7 @@ public interface Team {
      * @deprecated in favour of {@link #displayName()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getDisplayName() throws IllegalStateException;
 
     /**
@@ -122,7 +122,7 @@ public interface Team {
      * @throws IllegalStateException if this team has been unregistered
      * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;
 
     /**
@@ -133,7 +133,7 @@ public interface Team {
      * @deprecated in favour of {@link #prefix()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getPrefix() throws IllegalStateException;
 
     /**
@@ -146,7 +146,7 @@ public interface Team {
      * @throws IllegalStateException if this team has been unregistered
      * @deprecated in favour of {@link #prefix(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setPrefix(@NotNull String prefix) throws IllegalStateException, IllegalArgumentException;
 
     /**
@@ -157,7 +157,7 @@ public interface Team {
      * @deprecated in favour of {@link #suffix()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     String getSuffix() throws IllegalStateException;
 
     /**
@@ -170,7 +170,7 @@ public interface Team {
      * @throws IllegalStateException if this team has been unregistered
      * @deprecated in favour of {@link #suffix(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setSuffix(@NotNull String suffix) throws IllegalStateException, IllegalArgumentException;
 
     /**
@@ -184,7 +184,7 @@ public interface Team {
      * @deprecated in favour of {@link #color()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     ChatColor getColor() throws IllegalStateException;
 
     /**
@@ -197,7 +197,7 @@ public interface Team {
      * no color
      * @deprecated in favour of {@link #color(net.kyori.adventure.text.format.NamedTextColor)}
      */
-    @Deprecated // Paper
+    @Deprecated // Paper // Purpur - conflict on change
     void setColor(@NotNull ChatColor color);
 
     /**
diff --git a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
index 7763d610..d5a42707 100644
--- a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
@@ -18,6 +18,7 @@ public final class CommandPermissions {
         DefaultPermissions.registerPermission(PREFIX + "plugins", "Allows the user to view the list of plugins running on this server", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "reload", "Allows the user to reload the server settings", PermissionDefault.OP, commands);
         DefaultPermissions.registerPermission(PREFIX + "version", "Allows the user to view the version of the server", PermissionDefault.TRUE, commands);
+        DefaultPermissions.registerPermission(PREFIX + "purpur", "Allows the user to use the purpur command", PermissionDefault.OP, commands); // Purpur
 
         commands.recalculatePermissibles();
         return commands;
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index e1a4ddf2..10627d2a 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -31,7 +31,7 @@ public final class DefaultPermissions {
 
         if (withLegacy) {
             Permission legacy = new Permission(LEGACY_PREFIX + result.getName(), result.getDescription(), PermissionDefault.FALSE);
-            legacy.getChildren().put(result.getName(), true);
+            legacy.getChildren().put(result.getName(), null); // Purpur
             registerPermission(perm, false);
         }
 
@@ -40,7 +40,7 @@ public final class DefaultPermissions {
 
     @NotNull
     public static Permission registerPermission(@NotNull Permission perm, @NotNull Permission parent) {
-        parent.getChildren().put(perm.getName(), true);
+        parent.getChildren().put(perm.getName(), null); // Purpur
         return registerPermission(perm);
     }
 
@@ -53,7 +53,7 @@ public final class DefaultPermissions {
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc, @NotNull Permission parent) {
         Permission perm = registerPermission(name, desc);
-        parent.getChildren().put(perm.getName(), true);
+        parent.getChildren().put(perm.getName(), null); // Purpur
         return perm;
     }
 
@@ -66,7 +66,7 @@ public final class DefaultPermissions {
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @NotNull Permission parent) {
         Permission perm = registerPermission(name, desc, def);
-        parent.getChildren().put(perm.getName(), true);
+        parent.getChildren().put(perm.getName(), null); // Purpur
         return perm;
     }
 
@@ -79,7 +79,7 @@ public final class DefaultPermissions {
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children, @NotNull Permission parent) {
         Permission perm = registerPermission(name, desc, def, children);
-        parent.getChildren().put(perm.getName(), true);
+        parent.getChildren().put(perm.getName(), null); // Purpur
         return perm;
     }
 
@@ -89,6 +89,8 @@ public final class DefaultPermissions {
         CommandPermissions.registerPermissions(parent);
         BroadcastPermissions.registerPermissions(parent);
 
+        PurpurPermissions.registerPermissions(); // Purpur
+
         parent.recalculatePermissibles();
     }
 }
diff --git a/src/main/java/org/bukkit/util/permissions/PurpurPermissions.java b/src/main/java/org/bukkit/util/permissions/PurpurPermissions.java
new file mode 100644
index 00000000..316f3f7f
--- /dev/null
+++ b/src/main/java/org/bukkit/util/permissions/PurpurPermissions.java
@@ -0,0 +1,79 @@
+package org.bukkit.util.permissions;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Mob;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public final class PurpurPermissions {
+    private static final String ROOT = "purpur";
+    private static final String PREFIX = ROOT + ".";
+    private static final Set<String> mobs = new HashSet<>();
+
+    static {
+        for (EntityType mob : EntityType.values()) {
+            Class<? extends Entity> clazz = mob.getEntityClass();
+            if (clazz != null && Mob.class.isAssignableFrom(clazz)) {
+                mobs.add(mob.getName());
+            }
+        }
+    }
+
+    @NotNull
+    public static Permission registerPermissions() {
+        Permission purpur = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Purpur utilities and commands", PermissionDefault.FALSE);
+
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.six", "Gives the user six rows of enderchest space", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.five", "Gives the user five rows of enderchest space", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.four", "Gives the user four rows of enderchest space", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.three", "Gives the user three rows of enderchest space", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.two", "Gives the user two rows of enderchest space", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "enderchest.rows.one", "Gives the user one row of enderchest space", PermissionDefault.FALSE, purpur);
+
+        DefaultPermissions.registerPermission(PREFIX + "debug.f3n", "Allows the user to use F3+N keybind to swap gamemodes", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "joinfullserver", "Allows the user to join a full server", PermissionDefault.OP, purpur);
+
+        DefaultPermissions.registerPermission(PREFIX + "drop.spawner", "Allows the user to drop spawner cage when broken with diamond pickaxe with silk touch", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "place.spawner", "Allows the user to place spawner cage in the world", PermissionDefault.FALSE, purpur);
+
+        DefaultPermissions.registerPermission(PREFIX + "anvil.color", "Allows the user to use color codes on anvils", PermissionDefault.FALSE, purpur);
+
+        Permission book = DefaultPermissions.registerPermission(PREFIX + "book", "Allows the user to use color codes on books", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "book.color.edit", "Allows the user to use color codes on books when editing", PermissionDefault.FALSE, book);
+        DefaultPermissions.registerPermission(PREFIX + "book.color.sign", "Allows the user to use color codes on books when signing", PermissionDefault.FALSE, book);
+        book.recalculatePermissibles();
+
+        Permission sign = DefaultPermissions.registerPermission(PREFIX + "sign", "Allows the user to use all sign abilities", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission(PREFIX + "sign.edit", "Allows the user to click signs to open sign editor", PermissionDefault.FALSE, sign);
+        DefaultPermissions.registerPermission(PREFIX + "sign.color", "Allows the user to use color codes on signs", PermissionDefault.FALSE, sign);
+        DefaultPermissions.registerPermission(PREFIX + "sign.style", "Allows the user to use style codes on signs", PermissionDefault.FALSE, sign);
+        DefaultPermissions.registerPermission(PREFIX + "sign.magic", "Allows the user to use magic/obfuscate code on signs", PermissionDefault.FALSE, sign);
+        sign.recalculatePermissibles();
+
+        Permission ride = DefaultPermissions.registerPermission("allow.ride", "Allows the user to ride all mobs", PermissionDefault.FALSE, purpur);
+        for (String mob : mobs) {
+            DefaultPermissions.registerPermission("allow.ride." + mob, "Allows the user to ride " + mob, PermissionDefault.FALSE, ride);
+        }
+        ride.recalculatePermissibles();
+
+        Permission special = DefaultPermissions.registerPermission("allow.special", "Allows the user to use all mobs special abilities", PermissionDefault.FALSE, purpur);
+        for (String mob : mobs) {
+            DefaultPermissions.registerPermission("allow.special." + mob, "Allows the user to use " + mob + " special ability", PermissionDefault.FALSE, special);
+        }
+        special.recalculatePermissibles();
+
+        Permission powered = DefaultPermissions.registerPermission("allow.powered", "Allows the user to toggle all mobs powered state", PermissionDefault.FALSE, purpur);
+        DefaultPermissions.registerPermission("allow.powered.creeper", "Allows the user to toggle creeper powered state", PermissionDefault.FALSE, powered);
+        powered.recalculatePermissibles();
+
+        DefaultPermissions.registerPermission(PREFIX + "portal.instant", "Allows the user to bypass portal wait time", PermissionDefault.FALSE, purpur);
+
+        purpur.recalculatePermissibles();
+        return purpur;
+    }
+}
-- 
2.32.0.windows.2

